
lr3_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c3c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08004e08  08004e08  00014e08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ff8  08004ff8  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08004ff8  08004ff8  00014ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005000  08005000  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005000  08005000  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005004  08005004  00015004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08005008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000020  08005028  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08005028  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4e0  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018eb  00000000  00000000  0002a530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  0002be20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000718  00000000  00000000  0002c5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020cd1  00000000  00000000  0002ccd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009cae  00000000  00000000  0004d9a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8040  00000000  00000000  00057657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011f697  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002288  00000000  00000000  0011f6ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000020 	.word	0x20000020
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004dec 	.word	0x08004dec

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000024 	.word	0x20000024
 8000204:	08004dec 	.word	0x08004dec

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	; 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	; 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__gedf2>:
 80007d4:	f04f 3cff 	mov.w	ip, #4294967295
 80007d8:	e006      	b.n	80007e8 <__cmpdf2+0x4>
 80007da:	bf00      	nop

080007dc <__ledf2>:
 80007dc:	f04f 0c01 	mov.w	ip, #1
 80007e0:	e002      	b.n	80007e8 <__cmpdf2+0x4>
 80007e2:	bf00      	nop

080007e4 <__cmpdf2>:
 80007e4:	f04f 0c01 	mov.w	ip, #1
 80007e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007fe:	d01b      	beq.n	8000838 <__cmpdf2+0x54>
 8000800:	b001      	add	sp, #4
 8000802:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000806:	bf0c      	ite	eq
 8000808:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800080c:	ea91 0f03 	teqne	r1, r3
 8000810:	bf02      	ittt	eq
 8000812:	ea90 0f02 	teqeq	r0, r2
 8000816:	2000      	moveq	r0, #0
 8000818:	4770      	bxeq	lr
 800081a:	f110 0f00 	cmn.w	r0, #0
 800081e:	ea91 0f03 	teq	r1, r3
 8000822:	bf58      	it	pl
 8000824:	4299      	cmppl	r1, r3
 8000826:	bf08      	it	eq
 8000828:	4290      	cmpeq	r0, r2
 800082a:	bf2c      	ite	cs
 800082c:	17d8      	asrcs	r0, r3, #31
 800082e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000832:	f040 0001 	orr.w	r0, r0, #1
 8000836:	4770      	bx	lr
 8000838:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800083c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000840:	d102      	bne.n	8000848 <__cmpdf2+0x64>
 8000842:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000846:	d107      	bne.n	8000858 <__cmpdf2+0x74>
 8000848:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d1d6      	bne.n	8000800 <__cmpdf2+0x1c>
 8000852:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000856:	d0d3      	beq.n	8000800 <__cmpdf2+0x1c>
 8000858:	f85d 0b04 	ldr.w	r0, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop

08000860 <__aeabi_cdrcmple>:
 8000860:	4684      	mov	ip, r0
 8000862:	4610      	mov	r0, r2
 8000864:	4662      	mov	r2, ip
 8000866:	468c      	mov	ip, r1
 8000868:	4619      	mov	r1, r3
 800086a:	4663      	mov	r3, ip
 800086c:	e000      	b.n	8000870 <__aeabi_cdcmpeq>
 800086e:	bf00      	nop

08000870 <__aeabi_cdcmpeq>:
 8000870:	b501      	push	{r0, lr}
 8000872:	f7ff ffb7 	bl	80007e4 <__cmpdf2>
 8000876:	2800      	cmp	r0, #0
 8000878:	bf48      	it	mi
 800087a:	f110 0f00 	cmnmi.w	r0, #0
 800087e:	bd01      	pop	{r0, pc}

08000880 <__aeabi_dcmpeq>:
 8000880:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000884:	f7ff fff4 	bl	8000870 <__aeabi_cdcmpeq>
 8000888:	bf0c      	ite	eq
 800088a:	2001      	moveq	r0, #1
 800088c:	2000      	movne	r0, #0
 800088e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000892:	bf00      	nop

08000894 <__aeabi_dcmplt>:
 8000894:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000898:	f7ff ffea 	bl	8000870 <__aeabi_cdcmpeq>
 800089c:	bf34      	ite	cc
 800089e:	2001      	movcc	r0, #1
 80008a0:	2000      	movcs	r0, #0
 80008a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a6:	bf00      	nop

080008a8 <__aeabi_dcmple>:
 80008a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ac:	f7ff ffe0 	bl	8000870 <__aeabi_cdcmpeq>
 80008b0:	bf94      	ite	ls
 80008b2:	2001      	movls	r0, #1
 80008b4:	2000      	movhi	r0, #0
 80008b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ba:	bf00      	nop

080008bc <__aeabi_dcmpge>:
 80008bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008c0:	f7ff ffce 	bl	8000860 <__aeabi_cdrcmple>
 80008c4:	bf94      	ite	ls
 80008c6:	2001      	movls	r0, #1
 80008c8:	2000      	movhi	r0, #0
 80008ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ce:	bf00      	nop

080008d0 <__aeabi_dcmpgt>:
 80008d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d4:	f7ff ffc4 	bl	8000860 <__aeabi_cdrcmple>
 80008d8:	bf34      	ite	cc
 80008da:	2001      	movcc	r0, #1
 80008dc:	2000      	movcs	r0, #0
 80008de:	f85d fb08 	ldr.w	pc, [sp], #8
 80008e2:	bf00      	nop

080008e4 <__aeabi_d2iz>:
 80008e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ec:	d215      	bcs.n	800091a <__aeabi_d2iz+0x36>
 80008ee:	d511      	bpl.n	8000914 <__aeabi_d2iz+0x30>
 80008f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008f8:	d912      	bls.n	8000920 <__aeabi_d2iz+0x3c>
 80008fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000902:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000906:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	bf18      	it	ne
 8000910:	4240      	negne	r0, r0
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d105      	bne.n	800092c <__aeabi_d2iz+0x48>
 8000920:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000924:	bf08      	it	eq
 8000926:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <__aeabi_ldivmod>:
 8000934:	b97b      	cbnz	r3, 8000956 <__aeabi_ldivmod+0x22>
 8000936:	b972      	cbnz	r2, 8000956 <__aeabi_ldivmod+0x22>
 8000938:	2900      	cmp	r1, #0
 800093a:	bfbe      	ittt	lt
 800093c:	2000      	movlt	r0, #0
 800093e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000942:	e006      	blt.n	8000952 <__aeabi_ldivmod+0x1e>
 8000944:	bf08      	it	eq
 8000946:	2800      	cmpeq	r0, #0
 8000948:	bf1c      	itt	ne
 800094a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800094e:	f04f 30ff 	movne.w	r0, #4294967295
 8000952:	f000 b9b9 	b.w	8000cc8 <__aeabi_idiv0>
 8000956:	f1ad 0c08 	sub.w	ip, sp, #8
 800095a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800095e:	2900      	cmp	r1, #0
 8000960:	db09      	blt.n	8000976 <__aeabi_ldivmod+0x42>
 8000962:	2b00      	cmp	r3, #0
 8000964:	db1a      	blt.n	800099c <__aeabi_ldivmod+0x68>
 8000966:	f000 f84d 	bl	8000a04 <__udivmoddi4>
 800096a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800096e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000972:	b004      	add	sp, #16
 8000974:	4770      	bx	lr
 8000976:	4240      	negs	r0, r0
 8000978:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800097c:	2b00      	cmp	r3, #0
 800097e:	db1b      	blt.n	80009b8 <__aeabi_ldivmod+0x84>
 8000980:	f000 f840 	bl	8000a04 <__udivmoddi4>
 8000984:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000988:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800098c:	b004      	add	sp, #16
 800098e:	4240      	negs	r0, r0
 8000990:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000994:	4252      	negs	r2, r2
 8000996:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800099a:	4770      	bx	lr
 800099c:	4252      	negs	r2, r2
 800099e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009a2:	f000 f82f 	bl	8000a04 <__udivmoddi4>
 80009a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009ae:	b004      	add	sp, #16
 80009b0:	4240      	negs	r0, r0
 80009b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009b6:	4770      	bx	lr
 80009b8:	4252      	negs	r2, r2
 80009ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009be:	f000 f821 	bl	8000a04 <__udivmoddi4>
 80009c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009ca:	b004      	add	sp, #16
 80009cc:	4252      	negs	r2, r2
 80009ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009d2:	4770      	bx	lr

080009d4 <__aeabi_uldivmod>:
 80009d4:	b953      	cbnz	r3, 80009ec <__aeabi_uldivmod+0x18>
 80009d6:	b94a      	cbnz	r2, 80009ec <__aeabi_uldivmod+0x18>
 80009d8:	2900      	cmp	r1, #0
 80009da:	bf08      	it	eq
 80009dc:	2800      	cmpeq	r0, #0
 80009de:	bf1c      	itt	ne
 80009e0:	f04f 31ff 	movne.w	r1, #4294967295
 80009e4:	f04f 30ff 	movne.w	r0, #4294967295
 80009e8:	f000 b96e 	b.w	8000cc8 <__aeabi_idiv0>
 80009ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009f4:	f000 f806 	bl	8000a04 <__udivmoddi4>
 80009f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a00:	b004      	add	sp, #16
 8000a02:	4770      	bx	lr

08000a04 <__udivmoddi4>:
 8000a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a08:	9d08      	ldr	r5, [sp, #32]
 8000a0a:	4604      	mov	r4, r0
 8000a0c:	468c      	mov	ip, r1
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	f040 8083 	bne.w	8000b1a <__udivmoddi4+0x116>
 8000a14:	428a      	cmp	r2, r1
 8000a16:	4617      	mov	r7, r2
 8000a18:	d947      	bls.n	8000aaa <__udivmoddi4+0xa6>
 8000a1a:	fab2 f282 	clz	r2, r2
 8000a1e:	b142      	cbz	r2, 8000a32 <__udivmoddi4+0x2e>
 8000a20:	f1c2 0020 	rsb	r0, r2, #32
 8000a24:	fa24 f000 	lsr.w	r0, r4, r0
 8000a28:	4091      	lsls	r1, r2
 8000a2a:	4097      	lsls	r7, r2
 8000a2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a30:	4094      	lsls	r4, r2
 8000a32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a36:	0c23      	lsrs	r3, r4, #16
 8000a38:	fbbc f6f8 	udiv	r6, ip, r8
 8000a3c:	fa1f fe87 	uxth.w	lr, r7
 8000a40:	fb08 c116 	mls	r1, r8, r6, ip
 8000a44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a48:	fb06 f10e 	mul.w	r1, r6, lr
 8000a4c:	4299      	cmp	r1, r3
 8000a4e:	d909      	bls.n	8000a64 <__udivmoddi4+0x60>
 8000a50:	18fb      	adds	r3, r7, r3
 8000a52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a56:	f080 8119 	bcs.w	8000c8c <__udivmoddi4+0x288>
 8000a5a:	4299      	cmp	r1, r3
 8000a5c:	f240 8116 	bls.w	8000c8c <__udivmoddi4+0x288>
 8000a60:	3e02      	subs	r6, #2
 8000a62:	443b      	add	r3, r7
 8000a64:	1a5b      	subs	r3, r3, r1
 8000a66:	b2a4      	uxth	r4, r4
 8000a68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a78:	45a6      	cmp	lr, r4
 8000a7a:	d909      	bls.n	8000a90 <__udivmoddi4+0x8c>
 8000a7c:	193c      	adds	r4, r7, r4
 8000a7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a82:	f080 8105 	bcs.w	8000c90 <__udivmoddi4+0x28c>
 8000a86:	45a6      	cmp	lr, r4
 8000a88:	f240 8102 	bls.w	8000c90 <__udivmoddi4+0x28c>
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	443c      	add	r4, r7
 8000a90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a94:	eba4 040e 	sub.w	r4, r4, lr
 8000a98:	2600      	movs	r6, #0
 8000a9a:	b11d      	cbz	r5, 8000aa4 <__udivmoddi4+0xa0>
 8000a9c:	40d4      	lsrs	r4, r2
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e9c5 4300 	strd	r4, r3, [r5]
 8000aa4:	4631      	mov	r1, r6
 8000aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aaa:	b902      	cbnz	r2, 8000aae <__udivmoddi4+0xaa>
 8000aac:	deff      	udf	#255	; 0xff
 8000aae:	fab2 f282 	clz	r2, r2
 8000ab2:	2a00      	cmp	r2, #0
 8000ab4:	d150      	bne.n	8000b58 <__udivmoddi4+0x154>
 8000ab6:	1bcb      	subs	r3, r1, r7
 8000ab8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000abc:	fa1f f887 	uxth.w	r8, r7
 8000ac0:	2601      	movs	r6, #1
 8000ac2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ac6:	0c21      	lsrs	r1, r4, #16
 8000ac8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000acc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ad0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ad4:	428b      	cmp	r3, r1
 8000ad6:	d907      	bls.n	8000ae8 <__udivmoddi4+0xe4>
 8000ad8:	1879      	adds	r1, r7, r1
 8000ada:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ade:	d202      	bcs.n	8000ae6 <__udivmoddi4+0xe2>
 8000ae0:	428b      	cmp	r3, r1
 8000ae2:	f200 80e9 	bhi.w	8000cb8 <__udivmoddi4+0x2b4>
 8000ae6:	4684      	mov	ip, r0
 8000ae8:	1ac9      	subs	r1, r1, r3
 8000aea:	b2a3      	uxth	r3, r4
 8000aec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000af0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000af4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000af8:	fb08 f800 	mul.w	r8, r8, r0
 8000afc:	45a0      	cmp	r8, r4
 8000afe:	d907      	bls.n	8000b10 <__udivmoddi4+0x10c>
 8000b00:	193c      	adds	r4, r7, r4
 8000b02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x10a>
 8000b08:	45a0      	cmp	r8, r4
 8000b0a:	f200 80d9 	bhi.w	8000cc0 <__udivmoddi4+0x2bc>
 8000b0e:	4618      	mov	r0, r3
 8000b10:	eba4 0408 	sub.w	r4, r4, r8
 8000b14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b18:	e7bf      	b.n	8000a9a <__udivmoddi4+0x96>
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d909      	bls.n	8000b32 <__udivmoddi4+0x12e>
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	f000 80b1 	beq.w	8000c86 <__udivmoddi4+0x282>
 8000b24:	2600      	movs	r6, #0
 8000b26:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2a:	4630      	mov	r0, r6
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	fab3 f683 	clz	r6, r3
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d14a      	bne.n	8000bd0 <__udivmoddi4+0x1cc>
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d302      	bcc.n	8000b44 <__udivmoddi4+0x140>
 8000b3e:	4282      	cmp	r2, r0
 8000b40:	f200 80b8 	bhi.w	8000cb4 <__udivmoddi4+0x2b0>
 8000b44:	1a84      	subs	r4, r0, r2
 8000b46:	eb61 0103 	sbc.w	r1, r1, r3
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	468c      	mov	ip, r1
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	d0a8      	beq.n	8000aa4 <__udivmoddi4+0xa0>
 8000b52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b56:	e7a5      	b.n	8000aa4 <__udivmoddi4+0xa0>
 8000b58:	f1c2 0320 	rsb	r3, r2, #32
 8000b5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b60:	4097      	lsls	r7, r2
 8000b62:	fa01 f002 	lsl.w	r0, r1, r2
 8000b66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b6a:	40d9      	lsrs	r1, r3
 8000b6c:	4330      	orrs	r0, r6
 8000b6e:	0c03      	lsrs	r3, r0, #16
 8000b70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b74:	fa1f f887 	uxth.w	r8, r7
 8000b78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b80:	fb06 f108 	mul.w	r1, r6, r8
 8000b84:	4299      	cmp	r1, r3
 8000b86:	fa04 f402 	lsl.w	r4, r4, r2
 8000b8a:	d909      	bls.n	8000ba0 <__udivmoddi4+0x19c>
 8000b8c:	18fb      	adds	r3, r7, r3
 8000b8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b92:	f080 808d 	bcs.w	8000cb0 <__udivmoddi4+0x2ac>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 808a 	bls.w	8000cb0 <__udivmoddi4+0x2ac>
 8000b9c:	3e02      	subs	r6, #2
 8000b9e:	443b      	add	r3, r7
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b281      	uxth	r1, r0
 8000ba4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb0:	fb00 f308 	mul.w	r3, r0, r8
 8000bb4:	428b      	cmp	r3, r1
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x1c4>
 8000bb8:	1879      	adds	r1, r7, r1
 8000bba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bbe:	d273      	bcs.n	8000ca8 <__udivmoddi4+0x2a4>
 8000bc0:	428b      	cmp	r3, r1
 8000bc2:	d971      	bls.n	8000ca8 <__udivmoddi4+0x2a4>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	4439      	add	r1, r7
 8000bc8:	1acb      	subs	r3, r1, r3
 8000bca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bce:	e778      	b.n	8000ac2 <__udivmoddi4+0xbe>
 8000bd0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bd4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bd8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bdc:	431c      	orrs	r4, r3
 8000bde:	fa20 f70c 	lsr.w	r7, r0, ip
 8000be2:	fa01 f306 	lsl.w	r3, r1, r6
 8000be6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bee:	431f      	orrs	r7, r3
 8000bf0:	0c3b      	lsrs	r3, r7, #16
 8000bf2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bf6:	fa1f f884 	uxth.w	r8, r4
 8000bfa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bfe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c02:	fb09 fa08 	mul.w	sl, r9, r8
 8000c06:	458a      	cmp	sl, r1
 8000c08:	fa02 f206 	lsl.w	r2, r2, r6
 8000c0c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x220>
 8000c12:	1861      	adds	r1, r4, r1
 8000c14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c18:	d248      	bcs.n	8000cac <__udivmoddi4+0x2a8>
 8000c1a:	458a      	cmp	sl, r1
 8000c1c:	d946      	bls.n	8000cac <__udivmoddi4+0x2a8>
 8000c1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c22:	4421      	add	r1, r4
 8000c24:	eba1 010a 	sub.w	r1, r1, sl
 8000c28:	b2bf      	uxth	r7, r7
 8000c2a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c2e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c32:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c36:	fb00 f808 	mul.w	r8, r0, r8
 8000c3a:	45b8      	cmp	r8, r7
 8000c3c:	d907      	bls.n	8000c4e <__udivmoddi4+0x24a>
 8000c3e:	19e7      	adds	r7, r4, r7
 8000c40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c44:	d22e      	bcs.n	8000ca4 <__udivmoddi4+0x2a0>
 8000c46:	45b8      	cmp	r8, r7
 8000c48:	d92c      	bls.n	8000ca4 <__udivmoddi4+0x2a0>
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	4427      	add	r7, r4
 8000c4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c52:	eba7 0708 	sub.w	r7, r7, r8
 8000c56:	fba0 8902 	umull	r8, r9, r0, r2
 8000c5a:	454f      	cmp	r7, r9
 8000c5c:	46c6      	mov	lr, r8
 8000c5e:	4649      	mov	r1, r9
 8000c60:	d31a      	bcc.n	8000c98 <__udivmoddi4+0x294>
 8000c62:	d017      	beq.n	8000c94 <__udivmoddi4+0x290>
 8000c64:	b15d      	cbz	r5, 8000c7e <__udivmoddi4+0x27a>
 8000c66:	ebb3 020e 	subs.w	r2, r3, lr
 8000c6a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c6e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c72:	40f2      	lsrs	r2, r6
 8000c74:	ea4c 0202 	orr.w	r2, ip, r2
 8000c78:	40f7      	lsrs	r7, r6
 8000c7a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c7e:	2600      	movs	r6, #0
 8000c80:	4631      	mov	r1, r6
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	462e      	mov	r6, r5
 8000c88:	4628      	mov	r0, r5
 8000c8a:	e70b      	b.n	8000aa4 <__udivmoddi4+0xa0>
 8000c8c:	4606      	mov	r6, r0
 8000c8e:	e6e9      	b.n	8000a64 <__udivmoddi4+0x60>
 8000c90:	4618      	mov	r0, r3
 8000c92:	e6fd      	b.n	8000a90 <__udivmoddi4+0x8c>
 8000c94:	4543      	cmp	r3, r8
 8000c96:	d2e5      	bcs.n	8000c64 <__udivmoddi4+0x260>
 8000c98:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c9c:	eb69 0104 	sbc.w	r1, r9, r4
 8000ca0:	3801      	subs	r0, #1
 8000ca2:	e7df      	b.n	8000c64 <__udivmoddi4+0x260>
 8000ca4:	4608      	mov	r0, r1
 8000ca6:	e7d2      	b.n	8000c4e <__udivmoddi4+0x24a>
 8000ca8:	4660      	mov	r0, ip
 8000caa:	e78d      	b.n	8000bc8 <__udivmoddi4+0x1c4>
 8000cac:	4681      	mov	r9, r0
 8000cae:	e7b9      	b.n	8000c24 <__udivmoddi4+0x220>
 8000cb0:	4666      	mov	r6, ip
 8000cb2:	e775      	b.n	8000ba0 <__udivmoddi4+0x19c>
 8000cb4:	4630      	mov	r0, r6
 8000cb6:	e74a      	b.n	8000b4e <__udivmoddi4+0x14a>
 8000cb8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cbc:	4439      	add	r1, r7
 8000cbe:	e713      	b.n	8000ae8 <__udivmoddi4+0xe4>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	443c      	add	r4, r7
 8000cc4:	e724      	b.n	8000b10 <__udivmoddi4+0x10c>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_idiv0>:
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop

08000ccc <main>:
uint8_t empty_data[] = {'N', 0, 0, 0, 0, 0, 0, 'E'};
uint16_t input_package_size = 8;
uint16_t output_package_size = 8;

int main(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd0:	f000 ffe6 	bl	8001ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd4:	f000 fd56 	bl	8001784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd8:	f000 fdde 	bl	8001898 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cdc:	f000 fdb2 	bl	8001844 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  reset_all();
 8000ce0:	f000 fc98 	bl	8001614 <reset_all>
  set_long_number(count);
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <main+0x50>)
 8000ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cea:	4610      	mov	r0, r2
 8000cec:	4619      	mov	r1, r3
 8000cee:	f000 fbf9 	bl	80014e4 <set_long_number>

  HAL_UART_Receive_IT(&huart2, input_data, input_package_size);
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <main+0x54>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	490a      	ldr	r1, [pc, #40]	; (8000d24 <main+0x58>)
 8000cfa:	480b      	ldr	r0, [pc, #44]	; (8000d28 <main+0x5c>)
 8000cfc:	f002 f95e 	bl	8002fbc <HAL_UART_Receive_IT>
  while (1)
  {


	//  HAL_UART_Transmit_IT(&huart2, output_data, output_package_size);
	  HAL_Delay(100);
 8000d00:	2064      	movs	r0, #100	; 0x64
 8000d02:	f001 f83f 	bl	8001d84 <HAL_Delay>
	  set_float_number(answer);
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <main+0x60>)
 8000d08:	ed93 7b00 	vldr	d7, [r3]
 8000d0c:	eeb0 0a47 	vmov.f32	s0, s14
 8000d10:	eef0 0a67 	vmov.f32	s1, s15
 8000d14:	f000 fcb2 	bl	800167c <set_float_number>
	  HAL_Delay(100);
 8000d18:	e7f2      	b.n	8000d00 <main+0x34>
 8000d1a:	bf00      	nop
 8000d1c:	20000040 	.word	0x20000040
 8000d20:	20000010 	.word	0x20000010
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000050 	.word	0x20000050
 8000d2c:	20000048 	.word	0x20000048

08000d30 <unpack_data>:
  }
  /* USER CODE END 3 */
}


int64_t unpack_data(uint8_t* data){
 8000d30:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000d34:	b091      	sub	sp, #68	; 0x44
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	63f8      	str	r0, [r7, #60]	; 0x3c
	return (int64_t)((100000*(int64_t)(data[1] - '0'))+(10000*(int64_t)(data[2] - '0')) + (1000*(int64_t)(data[4] - '0')) + (100*(int64_t)(data[4] - '0'))+(10*(int64_t)(data[5] - '0')) + (int64_t)(data[6]-'0'));
 8000d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	3b30      	subs	r3, #48	; 0x30
 8000d42:	461a      	mov	r2, r3
 8000d44:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000d48:	4975      	ldr	r1, [pc, #468]	; (8000f20 <unpack_data+0x1f0>)
 8000d4a:	fb01 f003 	mul.w	r0, r1, r3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	fb01 f102 	mul.w	r1, r1, r2
 8000d54:	4408      	add	r0, r1
 8000d56:	4972      	ldr	r1, [pc, #456]	; (8000f20 <unpack_data+0x1f0>)
 8000d58:	fba2 8901 	umull	r8, r9, r2, r1
 8000d5c:	eb00 0309 	add.w	r3, r0, r9
 8000d60:	4699      	mov	r9, r3
 8000d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d64:	3302      	adds	r3, #2
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	3b30      	subs	r3, #48	; 0x30
 8000d6a:	461c      	mov	r4, r3
 8000d6c:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8000d70:	4622      	mov	r2, r4
 8000d72:	462b      	mov	r3, r5
 8000d74:	f04f 0000 	mov.w	r0, #0
 8000d78:	f04f 0100 	mov.w	r1, #0
 8000d7c:	0099      	lsls	r1, r3, #2
 8000d7e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000d82:	0090      	lsls	r0, r2, #2
 8000d84:	4602      	mov	r2, r0
 8000d86:	460b      	mov	r3, r1
 8000d88:	1912      	adds	r2, r2, r4
 8000d8a:	eb45 0303 	adc.w	r3, r5, r3
 8000d8e:	f04f 0000 	mov.w	r0, #0
 8000d92:	f04f 0100 	mov.w	r1, #0
 8000d96:	00d9      	lsls	r1, r3, #3
 8000d98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000d9c:	00d0      	lsls	r0, r2, #3
 8000d9e:	4602      	mov	r2, r0
 8000da0:	460b      	mov	r3, r1
 8000da2:	1b12      	subs	r2, r2, r4
 8000da4:	eb63 0305 	sbc.w	r3, r3, r5
 8000da8:	f04f 0000 	mov.w	r0, #0
 8000dac:	f04f 0100 	mov.w	r1, #0
 8000db0:	0119      	lsls	r1, r3, #4
 8000db2:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8000db6:	0110      	lsls	r0, r2, #4
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	1912      	adds	r2, r2, r4
 8000dbe:	eb45 0303 	adc.w	r3, r5, r3
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	f04f 0100 	mov.w	r1, #0
 8000dca:	0119      	lsls	r1, r3, #4
 8000dcc:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8000dd0:	0110      	lsls	r0, r2, #4
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	eb18 0102 	adds.w	r1, r8, r2
 8000dda:	6339      	str	r1, [r7, #48]	; 0x30
 8000ddc:	eb49 0303 	adc.w	r3, r9, r3
 8000de0:	637b      	str	r3, [r7, #52]	; 0x34
 8000de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000de4:	3304      	adds	r3, #4
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	3b30      	subs	r3, #48	; 0x30
 8000dea:	461c      	mov	r4, r3
 8000dec:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8000df0:	4622      	mov	r2, r4
 8000df2:	462b      	mov	r3, r5
 8000df4:	f04f 0000 	mov.w	r0, #0
 8000df8:	f04f 0100 	mov.w	r1, #0
 8000dfc:	0159      	lsls	r1, r3, #5
 8000dfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000e02:	0150      	lsls	r0, r2, #5
 8000e04:	4602      	mov	r2, r0
 8000e06:	460b      	mov	r3, r1
 8000e08:	1b12      	subs	r2, r2, r4
 8000e0a:	eb63 0305 	sbc.w	r3, r3, r5
 8000e0e:	f04f 0000 	mov.w	r0, #0
 8000e12:	f04f 0100 	mov.w	r1, #0
 8000e16:	0099      	lsls	r1, r3, #2
 8000e18:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000e1c:	0090      	lsls	r0, r2, #2
 8000e1e:	4602      	mov	r2, r0
 8000e20:	460b      	mov	r3, r1
 8000e22:	1912      	adds	r2, r2, r4
 8000e24:	eb45 0303 	adc.w	r3, r5, r3
 8000e28:	f04f 0000 	mov.w	r0, #0
 8000e2c:	f04f 0100 	mov.w	r1, #0
 8000e30:	00d9      	lsls	r1, r3, #3
 8000e32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000e36:	00d0      	lsls	r0, r2, #3
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8000e40:	4621      	mov	r1, r4
 8000e42:	1889      	adds	r1, r1, r2
 8000e44:	62b9      	str	r1, [r7, #40]	; 0x28
 8000e46:	4629      	mov	r1, r5
 8000e48:	eb43 0101 	adc.w	r1, r3, r1
 8000e4c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e50:	3304      	adds	r3, #4
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	3b30      	subs	r3, #48	; 0x30
 8000e56:	461c      	mov	r4, r3
 8000e58:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8000e5c:	4622      	mov	r2, r4
 8000e5e:	462b      	mov	r3, r5
 8000e60:	1891      	adds	r1, r2, r2
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	415b      	adcs	r3, r3
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e6c:	1912      	adds	r2, r2, r4
 8000e6e:	eb45 0303 	adc.w	r3, r5, r3
 8000e72:	f04f 0000 	mov.w	r0, #0
 8000e76:	f04f 0100 	mov.w	r1, #0
 8000e7a:	0159      	lsls	r1, r3, #5
 8000e7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000e80:	0150      	lsls	r0, r2, #5
 8000e82:	1812      	adds	r2, r2, r0
 8000e84:	eb41 0303 	adc.w	r3, r1, r3
 8000e88:	eb12 0a04 	adds.w	sl, r2, r4
 8000e8c:	eb43 0b05 	adc.w	fp, r3, r5
 8000e90:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8000e94:	460b      	mov	r3, r1
 8000e96:	eb13 030a 	adds.w	r3, r3, sl
 8000e9a:	623b      	str	r3, [r7, #32]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	eb43 030b 	adc.w	r3, r3, fp
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ea6:	3305      	adds	r3, #5
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	3b30      	subs	r3, #48	; 0x30
 8000eac:	461c      	mov	r4, r3
 8000eae:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8000eb2:	4622      	mov	r2, r4
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	f04f 0000 	mov.w	r0, #0
 8000eba:	f04f 0100 	mov.w	r1, #0
 8000ebe:	0099      	lsls	r1, r3, #2
 8000ec0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000ec4:	0090      	lsls	r0, r2, #2
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	1912      	adds	r2, r2, r4
 8000ecc:	eb45 0303 	adc.w	r3, r5, r3
 8000ed0:	1891      	adds	r1, r2, r2
 8000ed2:	6039      	str	r1, [r7, #0]
 8000ed4:	415b      	adcs	r3, r3
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000edc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000ee0:	4621      	mov	r1, r4
 8000ee2:	1889      	adds	r1, r1, r2
 8000ee4:	61b9      	str	r1, [r7, #24]
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	eb43 0101 	adc.w	r1, r3, r1
 8000eec:	61f9      	str	r1, [r7, #28]
 8000eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ef0:	3306      	adds	r3, #6
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	3b30      	subs	r3, #48	; 0x30
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000efc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000f00:	4621      	mov	r1, r4
 8000f02:	1889      	adds	r1, r1, r2
 8000f04:	6139      	str	r1, [r7, #16]
 8000f06:	4629      	mov	r1, r5
 8000f08:	eb43 0101 	adc.w	r1, r3, r1
 8000f0c:	6179      	str	r1, [r7, #20]
 8000f0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8000f12:	4610      	mov	r0, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	3744      	adds	r7, #68	; 0x44
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000f1e:	4770      	bx	lr
 8000f20:	000186a0 	.word	0x000186a0

08000f24 <send_data>:

void send_data(double data, uint16_t output_package_size) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	ed87 0b02 	vstr	d0, [r7, #8]
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80fb      	strh	r3, [r7, #6]
	if (data < 0) send_minus(output_package_size);
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f3e:	f7ff fca9 	bl	8000894 <__aeabi_dcmplt>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <send_data+0x2c>
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f84a 	bl	8000fe4 <send_minus>
	HAL_Delay(1);
 8000f50:	2001      	movs	r0, #1
 8000f52:	f000 ff17 	bl	8001d84 <HAL_Delay>
	if (abs(data) == 1) {
 8000f56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f5a:	f7ff fcc3 	bl	80008e4 <__aeabi_d2iz>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	bfb8      	it	lt
 8000f64:	425b      	neglt	r3, r3
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d10b      	bne.n	8000f82 <send_data+0x5e>
		send_number(1, output_package_size);
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	f04f 0001 	mov.w	r0, #1
 8000f72:	f04f 0100 	mov.w	r1, #0
 8000f76:	f000 f85d 	bl	8001034 <send_number>
		HAL_Delay(1);
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f000 ff02 	bl	8001d84 <HAL_Delay>
		send_number((int)(data*1000), output_package_size);
		//HAL_UART_Receive_IT(&huart2, input_data, input_package_size);
		HAL_Delay(1);
	}

}
 8000f80:	e029      	b.n	8000fd6 <send_data+0xb2>
		send_number(0, output_package_size);
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	461a      	mov	r2, r3
 8000f86:	f04f 0000 	mov.w	r0, #0
 8000f8a:	f04f 0100 	mov.w	r1, #0
 8000f8e:	f000 f851 	bl	8001034 <send_number>
		HAL_Delay(1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f000 fef6 	bl	8001d84 <HAL_Delay>
		send_dot(output_package_size);
 8000f98:	88fb      	ldrh	r3, [r7, #6]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f836 	bl	800100c <send_dot>
		HAL_Delay(1);
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f000 feef 	bl	8001d84 <HAL_Delay>
		send_number((int)(data*1000), output_package_size);
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <send_data+0xbc>)
 8000fac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fb0:	f7ff f92a 	bl	8000208 <__aeabi_dmul>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4610      	mov	r0, r2
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f7ff fc92 	bl	80008e4 <__aeabi_d2iz>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	f000 f832 	bl	8001034 <send_number>
		HAL_Delay(1);
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f000 fed7 	bl	8001d84 <HAL_Delay>
}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	408f4000 	.word	0x408f4000

08000fe4 <send_minus>:

void send_minus(uint16_t output_package_size) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
	uint8_t* minus = {'N', 0, 0, 0, 0, 0, 45,'E'};
 8000fee:	234e      	movs	r3, #78	; 0x4e
 8000ff0:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit_IT(&huart2, minus, output_package_size);
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	68f9      	ldr	r1, [r7, #12]
 8000ff8:	4803      	ldr	r0, [pc, #12]	; (8001008 <send_minus+0x24>)
 8000ffa:	f001 ff9a 	bl	8002f32 <HAL_UART_Transmit_IT>
}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000050 	.word	0x20000050

0800100c <send_dot>:

void send_dot(uint16_t output_package_size) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	80fb      	strh	r3, [r7, #6]
	uint8_t* dot = {'N', 0, 0, 0, 0, 0, 46,'E'};
 8001016:	234e      	movs	r3, #78	; 0x4e
 8001018:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit_IT(&huart2, dot, output_package_size);
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	461a      	mov	r2, r3
 800101e:	68f9      	ldr	r1, [r7, #12]
 8001020:	4803      	ldr	r0, [pc, #12]	; (8001030 <send_dot+0x24>)
 8001022:	f001 ff86 	bl	8002f32 <HAL_UART_Transmit_IT>
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000050 	.word	0x20000050

08001034 <send_number>:

void send_number(int64_t num, uint16_t output_package_size) {
 8001034:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001038:	b088      	sub	sp, #32
 800103a:	af00      	add	r7, sp, #0
 800103c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001040:	4613      	mov	r3, r2
 8001042:	80fb      	strh	r3, [r7, #6]
	uint8_t* package = {'N', 0, 0, 0, 0, 0, 0,'E'};
 8001044:	234e      	movs	r3, #78	; 0x4e
 8001046:	617b      	str	r3, [r7, #20]
	int64_t counter = 1;
 8001048:	f04f 0201 	mov.w	r2, #1
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e9c7 2306 	strd	r2, r3, [r7, #24]
	while ((num/10) != 0) {
 8001054:	e022      	b.n	800109c <send_number+0x68>
		package[counter] = num % 10;
 8001056:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800105a:	f04f 020a 	mov.w	r2, #10
 800105e:	f04f 0300 	mov.w	r3, #0
 8001062:	f7ff fc67 	bl	8000934 <__aeabi_ldivmod>
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	4413      	add	r3, r2
 8001070:	b2c2      	uxtb	r2, r0
 8001072:	701a      	strb	r2, [r3, #0]
		num /= 10;
 8001074:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001078:	f04f 020a 	mov.w	r2, #10
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	f7ff fc58 	bl	8000934 <__aeabi_ldivmod>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	e9c7 2302 	strd	r2, r3, [r7, #8]
		counter++;
 800108c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001090:	f112 0801 	adds.w	r8, r2, #1
 8001094:	f143 0900 	adc.w	r9, r3, #0
 8001098:	e9c7 8906 	strd	r8, r9, [r7, #24]
	while ((num/10) != 0) {
 800109c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010a0:	f112 0409 	adds.w	r4, r2, #9
 80010a4:	f143 0500 	adc.w	r5, r3, #0
 80010a8:	2d00      	cmp	r5, #0
 80010aa:	bf08      	it	eq
 80010ac:	2c13      	cmpeq	r4, #19
 80010ae:	d2d2      	bcs.n	8001056 <send_number+0x22>
	}
	HAL_UART_Transmit_IT(&huart2, package, output_package_size);
 80010b0:	88fb      	ldrh	r3, [r7, #6]
 80010b2:	461a      	mov	r2, r3
 80010b4:	6979      	ldr	r1, [r7, #20]
 80010b6:	4804      	ldr	r0, [pc, #16]	; (80010c8 <send_number+0x94>)
 80010b8:	f001 ff3b 	bl	8002f32 <HAL_UART_Transmit_IT>
}
 80010bc:	bf00      	nop
 80010be:	3720      	adds	r7, #32
 80010c0:	46bd      	mov	sp, r7
 80010c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010c6:	bf00      	nop
 80010c8:	20000050 	.word	0x20000050

080010cc <set_number>:
	for (int64_t i = 1; i < input_package_size-1; i++) {
		array[i] = 0;
	}
}

void set_number(int64_t num) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	e9c7 0100 	strd	r0, r1, [r7]
 80010d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010da:	1c02      	adds	r2, r0, #0
 80010dc:	f141 0300 	adc.w	r3, r1, #0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	bf08      	it	eq
 80010e4:	2a0a      	cmpeq	r2, #10
 80010e6:	f080 813d 	bcs.w	8001364 <set_number+0x298>
 80010ea:	2a09      	cmp	r2, #9
 80010ec:	f200 813a 	bhi.w	8001364 <set_number+0x298>
 80010f0:	a101      	add	r1, pc, #4	; (adr r1, 80010f8 <set_number+0x2c>)
 80010f2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80010f6:	bf00      	nop
 80010f8:	08001121 	.word	0x08001121
 80010fc:	08001167 	.word	0x08001167
 8001100:	08001181 	.word	0x08001181
 8001104:	080011bd 	.word	0x080011bd
 8001108:	080011f9 	.word	0x080011f9
 800110c:	08001229 	.word	0x08001229
 8001110:	08001263 	.word	0x08001263
 8001114:	080012a9 	.word	0x080012a9
 8001118:	080012cd 	.word	0x080012cd
 800111c:	0800131f 	.word	0x0800131f
    switch (num) {
        case 0:
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2104      	movs	r1, #4
 8001124:	4891      	ldr	r0, [pc, #580]	; (800136c <set_number+0x2a0>)
 8001126:	f001 f989 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2140      	movs	r1, #64	; 0x40
 800112e:	4890      	ldr	r0, [pc, #576]	; (8001370 <set_number+0x2a4>)
 8001130:	f001 f984 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800113a:	488d      	ldr	r0, [pc, #564]	; (8001370 <set_number+0x2a4>)
 800113c:	f001 f97e 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001146:	488a      	ldr	r0, [pc, #552]	; (8001370 <set_number+0x2a4>)
 8001148:	f001 f978 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001152:	4888      	ldr	r0, [pc, #544]	; (8001374 <set_number+0x2a8>)
 8001154:	f001 f972 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800115e:	4885      	ldr	r0, [pc, #532]	; (8001374 <set_number+0x2a8>)
 8001160:	f001 f96c 	bl	800243c <HAL_GPIO_WritePin>
            break;
 8001164:	e0fe      	b.n	8001364 <set_number+0x298>
        case 1:
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800116c:	4880      	ldr	r0, [pc, #512]	; (8001370 <set_number+0x2a4>)
 800116e:	f001 f965 	bl	800243c <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001178:	487d      	ldr	r0, [pc, #500]	; (8001370 <set_number+0x2a4>)
 800117a:	f001 f95f 	bl	800243c <HAL_GPIO_WritePin>
            break;
 800117e:	e0f1      	b.n	8001364 <set_number+0x298>
        case 2:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001186:	487b      	ldr	r0, [pc, #492]	; (8001374 <set_number+0x2a8>)
 8001188:	f001 f958 	bl	800243c <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	2140      	movs	r1, #64	; 0x40
 8001190:	4877      	ldr	r0, [pc, #476]	; (8001370 <set_number+0x2a4>)
 8001192:	f001 f953 	bl	800243c <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800119c:	4874      	ldr	r0, [pc, #464]	; (8001370 <set_number+0x2a4>)
 800119e:	f001 f94d 	bl	800243c <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a8:	4872      	ldr	r0, [pc, #456]	; (8001374 <set_number+0x2a8>)
 80011aa:	f001 f947 	bl	800243c <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b4:	486f      	ldr	r0, [pc, #444]	; (8001374 <set_number+0x2a8>)
 80011b6:	f001 f941 	bl	800243c <HAL_GPIO_WritePin>
            break;
 80011ba:	e0d3      	b.n	8001364 <set_number+0x298>
        case 3:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c2:	486c      	ldr	r0, [pc, #432]	; (8001374 <set_number+0x2a8>)
 80011c4:	f001 f93a 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2140      	movs	r1, #64	; 0x40
 80011cc:	4868      	ldr	r0, [pc, #416]	; (8001370 <set_number+0x2a4>)
 80011ce:	f001 f935 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d8:	4865      	ldr	r0, [pc, #404]	; (8001370 <set_number+0x2a4>)
 80011da:	f001 f92f 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011e4:	4863      	ldr	r0, [pc, #396]	; (8001374 <set_number+0x2a8>)
 80011e6:	f001 f929 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f0:	485f      	ldr	r0, [pc, #380]	; (8001370 <set_number+0x2a4>)
 80011f2:	f001 f923 	bl	800243c <HAL_GPIO_WritePin>
            break;
 80011f6:	e0b5      	b.n	8001364 <set_number+0x298>
        case 4:
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2104      	movs	r1, #4
 80011fc:	485b      	ldr	r0, [pc, #364]	; (800136c <set_number+0x2a0>)
 80011fe:	f001 f91d 	bl	800243c <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001208:	485a      	ldr	r0, [pc, #360]	; (8001374 <set_number+0x2a8>)
 800120a:	f001 f917 	bl	800243c <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001214:	4856      	ldr	r0, [pc, #344]	; (8001370 <set_number+0x2a4>)
 8001216:	f001 f911 	bl	800243c <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001220:	4853      	ldr	r0, [pc, #332]	; (8001370 <set_number+0x2a4>)
 8001222:	f001 f90b 	bl	800243c <HAL_GPIO_WritePin>
            break;
 8001226:	e09d      	b.n	8001364 <set_number+0x298>
        case 5:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800122e:	4851      	ldr	r0, [pc, #324]	; (8001374 <set_number+0x2a8>)
 8001230:	f001 f904 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	2104      	movs	r1, #4
 8001238:	484c      	ldr	r0, [pc, #304]	; (800136c <set_number+0x2a0>)
 800123a:	f001 f8ff 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	2140      	movs	r1, #64	; 0x40
 8001242:	484b      	ldr	r0, [pc, #300]	; (8001370 <set_number+0x2a4>)
 8001244:	f001 f8fa 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800124e:	4848      	ldr	r0, [pc, #288]	; (8001370 <set_number+0x2a4>)
 8001250:	f001 f8f4 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800125a:	4846      	ldr	r0, [pc, #280]	; (8001374 <set_number+0x2a8>)
 800125c:	f001 f8ee 	bl	800243c <HAL_GPIO_WritePin>
            break;
 8001260:	e080      	b.n	8001364 <set_number+0x298>
        case 6:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001268:	4842      	ldr	r0, [pc, #264]	; (8001374 <set_number+0x2a8>)
 800126a:	f001 f8e7 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2104      	movs	r1, #4
 8001272:	483e      	ldr	r0, [pc, #248]	; (800136c <set_number+0x2a0>)
 8001274:	f001 f8e2 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	2140      	movs	r1, #64	; 0x40
 800127c:	483c      	ldr	r0, [pc, #240]	; (8001370 <set_number+0x2a4>)
 800127e:	f001 f8dd 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001288:	4839      	ldr	r0, [pc, #228]	; (8001370 <set_number+0x2a4>)
 800128a:	f001 f8d7 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001294:	4837      	ldr	r0, [pc, #220]	; (8001374 <set_number+0x2a8>)
 8001296:	f001 f8d1 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012a0:	4834      	ldr	r0, [pc, #208]	; (8001374 <set_number+0x2a8>)
 80012a2:	f001 f8cb 	bl	800243c <HAL_GPIO_WritePin>
            break;
 80012a6:	e05d      	b.n	8001364 <set_number+0x298>
        case 7:
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2140      	movs	r1, #64	; 0x40
 80012ac:	4830      	ldr	r0, [pc, #192]	; (8001370 <set_number+0x2a4>)
 80012ae:	f001 f8c5 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b8:	482d      	ldr	r0, [pc, #180]	; (8001370 <set_number+0x2a4>)
 80012ba:	f001 f8bf 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c4:	482a      	ldr	r0, [pc, #168]	; (8001370 <set_number+0x2a4>)
 80012c6:	f001 f8b9 	bl	800243c <HAL_GPIO_WritePin>
            break;
 80012ca:	e04b      	b.n	8001364 <set_number+0x298>
        case 8:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d2:	4828      	ldr	r0, [pc, #160]	; (8001374 <set_number+0x2a8>)
 80012d4:	f001 f8b2 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	2104      	movs	r1, #4
 80012dc:	4823      	ldr	r0, [pc, #140]	; (800136c <set_number+0x2a0>)
 80012de:	f001 f8ad 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2140      	movs	r1, #64	; 0x40
 80012e6:	4822      	ldr	r0, [pc, #136]	; (8001370 <set_number+0x2a4>)
 80012e8:	f001 f8a8 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f2:	481f      	ldr	r0, [pc, #124]	; (8001370 <set_number+0x2a4>)
 80012f4:	f001 f8a2 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012fe:	481c      	ldr	r0, [pc, #112]	; (8001370 <set_number+0x2a4>)
 8001300:	f001 f89c 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800130a:	481a      	ldr	r0, [pc, #104]	; (8001374 <set_number+0x2a8>)
 800130c:	f001 f896 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001316:	4817      	ldr	r0, [pc, #92]	; (8001374 <set_number+0x2a8>)
 8001318:	f001 f890 	bl	800243c <HAL_GPIO_WritePin>
            break;
 800131c:	e022      	b.n	8001364 <set_number+0x298>
        case 9:
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001324:	4813      	ldr	r0, [pc, #76]	; (8001374 <set_number+0x2a8>)
 8001326:	f001 f889 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	2104      	movs	r1, #4
 800132e:	480f      	ldr	r0, [pc, #60]	; (800136c <set_number+0x2a0>)
 8001330:	f001 f884 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	2140      	movs	r1, #64	; 0x40
 8001338:	480d      	ldr	r0, [pc, #52]	; (8001370 <set_number+0x2a4>)
 800133a:	f001 f87f 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001344:	480a      	ldr	r0, [pc, #40]	; (8001370 <set_number+0x2a4>)
 8001346:	f001 f879 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001350:	4807      	ldr	r0, [pc, #28]	; (8001370 <set_number+0x2a4>)
 8001352:	f001 f873 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800135c:	4805      	ldr	r0, [pc, #20]	; (8001374 <set_number+0x2a8>)
 800135e:	f001 f86d 	bl	800243c <HAL_GPIO_WritePin>
            break;
 8001362:	bf00      	nop
    }
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40020c00 	.word	0x40020c00
 8001370:	40020000 	.word	0x40020000
 8001374:	40020800 	.word	0x40020800

08001378 <reset_number>:

void reset_number() {
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001382:	4816      	ldr	r0, [pc, #88]	; (80013dc <reset_number+0x64>)
 8001384:	f001 f85a 	bl	800243c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8001388:	2201      	movs	r2, #1
 800138a:	2104      	movs	r1, #4
 800138c:	4814      	ldr	r0, [pc, #80]	; (80013e0 <reset_number+0x68>)
 800138e:	f001 f855 	bl	800243c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001392:	2201      	movs	r2, #1
 8001394:	2140      	movs	r1, #64	; 0x40
 8001396:	4813      	ldr	r0, [pc, #76]	; (80013e4 <reset_number+0x6c>)
 8001398:	f001 f850 	bl	800243c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a2:	4810      	ldr	r0, [pc, #64]	; (80013e4 <reset_number+0x6c>)
 80013a4:	f001 f84a 	bl	800243c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ae:	480d      	ldr	r0, [pc, #52]	; (80013e4 <reset_number+0x6c>)
 80013b0:	f001 f844 	bl	800243c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80013b4:	2201      	movs	r2, #1
 80013b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ba:	4808      	ldr	r0, [pc, #32]	; (80013dc <reset_number+0x64>)
 80013bc:	f001 f83e 	bl	800243c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <reset_number+0x64>)
 80013c8:	f001 f838 	bl	800243c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80013cc:	2201      	movs	r2, #1
 80013ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013d2:	4804      	ldr	r0, [pc, #16]	; (80013e4 <reset_number+0x6c>)
 80013d4:	f001 f832 	bl	800243c <HAL_GPIO_WritePin>
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40020800 	.word	0x40020800
 80013e0:	40020c00 	.word	0x40020c00
 80013e4:	40020000 	.word	0x40020000

080013e8 <set_screen>:

void set_screen(int64_t num) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	e9c7 0100 	strd	r0, r1, [r7]
 80013f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013f6:	f110 32ff 	adds.w	r2, r0, #4294967295
 80013fa:	f141 33ff 	adc.w	r3, r1, #4294967295
 80013fe:	2b00      	cmp	r3, #0
 8001400:	bf08      	it	eq
 8001402:	2a04      	cmpeq	r2, #4
 8001404:	d264      	bcs.n	80014d0 <set_screen+0xe8>
 8001406:	2a03      	cmp	r2, #3
 8001408:	d862      	bhi.n	80014d0 <set_screen+0xe8>
 800140a:	a101      	add	r1, pc, #4	; (adr r1, 8001410 <set_screen+0x28>)
 800140c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8001410:	08001421 	.word	0x08001421
 8001414:	0800144d 	.word	0x0800144d
 8001418:	08001479 	.word	0x08001479
 800141c:	080014a5 	.word	0x080014a5
    switch (num) {
        case 1:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001420:	2201      	movs	r2, #1
 8001422:	2102      	movs	r1, #2
 8001424:	482c      	ldr	r0, [pc, #176]	; (80014d8 <set_screen+0xf0>)
 8001426:	f001 f809 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800142a:	2201      	movs	r2, #1
 800142c:	2108      	movs	r1, #8
 800142e:	482a      	ldr	r0, [pc, #168]	; (80014d8 <set_screen+0xf0>)
 8001430:	f001 f804 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001434:	2201      	movs	r2, #1
 8001436:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800143a:	4828      	ldr	r0, [pc, #160]	; (80014dc <set_screen+0xf4>)
 800143c:	f000 fffe 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	2110      	movs	r1, #16
 8001444:	4826      	ldr	r0, [pc, #152]	; (80014e0 <set_screen+0xf8>)
 8001446:	f000 fff9 	bl	800243c <HAL_GPIO_WritePin>
            break;
 800144a:	e041      	b.n	80014d0 <set_screen+0xe8>
        case 2:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800144c:	2201      	movs	r2, #1
 800144e:	2102      	movs	r1, #2
 8001450:	4821      	ldr	r0, [pc, #132]	; (80014d8 <set_screen+0xf0>)
 8001452:	f000 fff3 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8001456:	2201      	movs	r2, #1
 8001458:	2108      	movs	r1, #8
 800145a:	481f      	ldr	r0, [pc, #124]	; (80014d8 <set_screen+0xf0>)
 800145c:	f000 ffee 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001466:	481d      	ldr	r0, [pc, #116]	; (80014dc <set_screen+0xf4>)
 8001468:	f000 ffe8 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 800146c:	2201      	movs	r2, #1
 800146e:	2110      	movs	r1, #16
 8001470:	481b      	ldr	r0, [pc, #108]	; (80014e0 <set_screen+0xf8>)
 8001472:	f000 ffe3 	bl	800243c <HAL_GPIO_WritePin>
            break;
 8001476:	e02b      	b.n	80014d0 <set_screen+0xe8>
        case 3:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	2102      	movs	r1, #2
 800147c:	4816      	ldr	r0, [pc, #88]	; (80014d8 <set_screen+0xf0>)
 800147e:	f000 ffdd 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	2108      	movs	r1, #8
 8001486:	4814      	ldr	r0, [pc, #80]	; (80014d8 <set_screen+0xf0>)
 8001488:	f000 ffd8 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001492:	4812      	ldr	r0, [pc, #72]	; (80014dc <set_screen+0xf4>)
 8001494:	f000 ffd2 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	2110      	movs	r1, #16
 800149c:	4810      	ldr	r0, [pc, #64]	; (80014e0 <set_screen+0xf8>)
 800149e:	f000 ffcd 	bl	800243c <HAL_GPIO_WritePin>
            break;
 80014a2:	e015      	b.n	80014d0 <set_screen+0xe8>
        case 4:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2102      	movs	r1, #2
 80014a8:	480b      	ldr	r0, [pc, #44]	; (80014d8 <set_screen+0xf0>)
 80014aa:	f000 ffc7 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80014ae:	2201      	movs	r2, #1
 80014b0:	2108      	movs	r1, #8
 80014b2:	4809      	ldr	r0, [pc, #36]	; (80014d8 <set_screen+0xf0>)
 80014b4:	f000 ffc2 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80014b8:	2201      	movs	r2, #1
 80014ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014be:	4807      	ldr	r0, [pc, #28]	; (80014dc <set_screen+0xf4>)
 80014c0:	f000 ffbc 	bl	800243c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2110      	movs	r1, #16
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <set_screen+0xf8>)
 80014ca:	f000 ffb7 	bl	800243c <HAL_GPIO_WritePin>
            break;
 80014ce:	bf00      	nop
    }
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40020400 	.word	0x40020400
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40020800 	.word	0x40020800

080014e4 <set_long_number>:

void set_long_number(int64_t num) {
 80014e4:	b5b0      	push	{r4, r5, r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	e9c7 0100 	strd	r0, r1, [r7]

    int64_t digit_count = 0;
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	f04f 0300 	mov.w	r3, #0
 80014f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int64_t buffer = (int64_t) abs(num);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	bfb8      	it	lt
 8001500:	425b      	neglt	r3, r3
 8001502:	461a      	mov	r2, r3
 8001504:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001508:	e9c7 2304 	strd	r2, r3, [r7, #16]

    for (int i = 1; i <= 4; ++i) {
 800150c:	2301      	movs	r3, #1
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	e01e      	b.n	8001550 <set_long_number+0x6c>
        if (buffer % 10) digit_count = i;
 8001512:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001516:	f04f 020a 	mov.w	r2, #10
 800151a:	f04f 0300 	mov.w	r3, #0
 800151e:	f7ff fa09 	bl	8000934 <__aeabi_ldivmod>
 8001522:	4313      	orrs	r3, r2
 8001524:	d005      	beq.n	8001532 <set_long_number+0x4e>
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	461a      	mov	r2, r3
 800152a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800152e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        buffer /= 10;
 8001532:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001536:	f04f 020a 	mov.w	r2, #10
 800153a:	f04f 0300 	mov.w	r3, #0
 800153e:	f7ff f9f9 	bl	8000934 <__aeabi_ldivmod>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 1; i <= 4; ++i) {
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3301      	adds	r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b04      	cmp	r3, #4
 8001554:	dddd      	ble.n	8001512 <set_long_number+0x2e>
    }

    if (num == 0) {
 8001556:	e9d7 2300 	ldrd	r2, r3, [r7]
 800155a:	4313      	orrs	r3, r2
 800155c:	d105      	bne.n	800156a <set_long_number+0x86>
    	digit_count = 2;
 800155e:	f04f 0202 	mov.w	r2, #2
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	e9c7 2306 	strd	r2, r3, [r7, #24]
    }

    buffer = (int64_t) abs(num);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	bfb8      	it	lt
 8001570:	425b      	neglt	r3, r3
 8001572:	461a      	mov	r2, r3
 8001574:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001578:	e9c7 2304 	strd	r2, r3, [r7, #16]

    for (int i = 1; i <= digit_count; ++i) {
 800157c:	2301      	movs	r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	e039      	b.n	80015f6 <set_long_number+0x112>
        set_screen(i);
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	461a      	mov	r2, r3
 8001586:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff ff2b 	bl	80013e8 <set_screen>
        reset_number();
 8001592:	f7ff fef1 	bl	8001378 <reset_number>
        set_number(buffer % 10);
 8001596:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800159a:	f04f 020a 	mov.w	r2, #10
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	f7ff f9c7 	bl	8000934 <__aeabi_ldivmod>
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7ff fd8f 	bl	80010cc <set_number>
        buffer /= 10;
 80015ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015b2:	f04f 020a 	mov.w	r2, #10
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	f7ff f9bb 	bl	8000934 <__aeabi_ldivmod>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
        HAL_Delay(1);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f000 fbdc 	bl	8001d84 <HAL_Delay>
        if (num < 0) {
 80015cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015d0:	2a00      	cmp	r2, #0
 80015d2:	f173 0300 	sbcs.w	r3, r3, #0
 80015d6:	da0b      	bge.n	80015f0 <set_long_number+0x10c>
                set_minus(digit_count+1);
 80015d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015dc:	1c54      	adds	r4, r2, #1
 80015de:	f143 0500 	adc.w	r5, r3, #0
 80015e2:	4620      	mov	r0, r4
 80015e4:	4629      	mov	r1, r5
 80015e6:	f000 f831 	bl	800164c <set_minus>
				HAL_Delay(1);
 80015ea:	2001      	movs	r0, #1
 80015ec:	f000 fbca 	bl	8001d84 <HAL_Delay>
    for (int i = 1; i <= digit_count; ++i) {
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	3301      	adds	r3, #1
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	461a      	mov	r2, r3
 80015fa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001602:	4290      	cmp	r0, r2
 8001604:	eb71 0303 	sbcs.w	r3, r1, r3
 8001608:	dabb      	bge.n	8001582 <set_long_number+0x9e>
        }
    }


}
 800160a:	bf00      	nop
 800160c:	bf00      	nop
 800160e:	3720      	adds	r7, #32
 8001610:	46bd      	mov	sp, r7
 8001612:	bdb0      	pop	{r4, r5, r7, pc}

08001614 <reset_all>:

void reset_all() {
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
    for (int i = 1; i <= 4; ++i) {
 800161a:	2301      	movs	r3, #1
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	e00c      	b.n	800163a <reset_all+0x26>
        set_screen(i);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	461a      	mov	r2, r3
 8001624:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	f7ff fedc 	bl	80013e8 <set_screen>
        reset_number();
 8001630:	f7ff fea2 	bl	8001378 <reset_number>
    for (int i = 1; i <= 4; ++i) {
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3301      	adds	r3, #1
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b04      	cmp	r3, #4
 800163e:	ddef      	ble.n	8001620 <reset_all+0xc>
    }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <set_minus>:

void set_minus(int64_t digit_count) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	e9c7 0100 	strd	r0, r1, [r7]
    set_screen(digit_count);
 8001656:	e9d7 0100 	ldrd	r0, r1, [r7]
 800165a:	f7ff fec5 	bl	80013e8 <set_screen>
    reset_number();
 800165e:	f7ff fe8b 	bl	8001378 <reset_number>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001668:	4803      	ldr	r0, [pc, #12]	; (8001678 <set_minus+0x2c>)
 800166a:	f000 fee7 	bl	800243c <HAL_GPIO_WritePin>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40020800 	.word	0x40020800

0800167c <set_float_number>:

void set_float_number(double num) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	ed87 0b00 	vstr	d0, [r7]
	int64_t int_part = (int)num;
 8001686:	e9d7 0100 	ldrd	r0, r1, [r7]
 800168a:	f7ff f92b 	bl	80008e4 <__aeabi_d2iz>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001696:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int64_t float_part = get_float_part(num);
 800169a:	ed97 0b00 	vldr	d0, [r7]
 800169e:	f000 f82b 	bl	80016f8 <get_float_part>
 80016a2:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if (int_part < 0) {
 80016a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016aa:	2a00      	cmp	r2, #0
 80016ac:	f173 0300 	sbcs.w	r3, r3, #0
 80016b0:	da05      	bge.n	80016be <set_float_number+0x42>
		set_minus(4);
 80016b2:	f04f 0004 	mov.w	r0, #4
 80016b6:	f04f 0100 	mov.w	r1, #0
 80016ba:	f7ff ffc7 	bl	800164c <set_minus>
	}
	HAL_Delay(1);
 80016be:	2001      	movs	r0, #1
 80016c0:	f000 fb60 	bl	8001d84 <HAL_Delay>
	set_screen(3);
 80016c4:	f04f 0003 	mov.w	r0, #3
 80016c8:	f04f 0100 	mov.w	r1, #0
 80016cc:	f7ff fe8c 	bl	80013e8 <set_screen>
	reset_number();
 80016d0:	f7ff fe52 	bl	8001378 <reset_number>
	set_number(int_part);
 80016d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016d8:	f7ff fcf8 	bl	80010cc <set_number>
	set_dot();
 80016dc:	f000 f846 	bl	800176c <set_dot>
	HAL_Delay(1);
 80016e0:	2001      	movs	r0, #1
 80016e2:	f000 fb4f 	bl	8001d84 <HAL_Delay>
	set_long_number(float_part);
 80016e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016ea:	f7ff fefb 	bl	80014e4 <set_long_number>
}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <get_float_part>:

int64_t get_float_part(double num) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	ed87 0b00 	vstr	d0, [r7]
	num = num - (double)((int)num);
 8001702:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001706:	f7ff f8ed 	bl	80008e4 <__aeabi_d2iz>
 800170a:	4603      	mov	r3, r0
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe fff7 	bl	8000700 <__aeabi_i2d>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	e9d7 0100 	ldrd	r0, r1, [r7]
 800171a:	f7fe fea3 	bl	8000464 <__aeabi_dsub>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	e9c7 2300 	strd	r2, r3, [r7]
	return ((int)(round(num*100)));
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <get_float_part+0x70>)
 800172c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001730:	f7fe fd6a 	bl	8000208 <__aeabi_dmul>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	ec43 2b17 	vmov	d7, r2, r3
 800173c:	eeb0 0a47 	vmov.f32	s0, s14
 8001740:	eef0 0a67 	vmov.f32	s1, s15
 8001744:	f002 fad6 	bl	8003cf4 <round>
 8001748:	ec53 2b10 	vmov	r2, r3, d0
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f7ff f8c8 	bl	80008e4 <__aeabi_d2iz>
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	ea4f 73e2 	mov.w	r3, r2, asr #31
}
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40590000 	.word	0x40590000

0800176c <set_dot>:

void set_dot() {
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001770:	2200      	movs	r2, #0
 8001772:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001776:	4802      	ldr	r0, [pc, #8]	; (8001780 <set_dot+0x14>)
 8001778:	f000 fe60 	bl	800243c <HAL_GPIO_WritePin>
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40020000 	.word	0x40020000

08001784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b094      	sub	sp, #80	; 0x50
 8001788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178a:	f107 031c 	add.w	r3, r7, #28
 800178e:	2234      	movs	r2, #52	; 0x34
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f002 faa6 	bl	8003ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001798:	f107 0308 	add.w	r3, r7, #8
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	4b23      	ldr	r3, [pc, #140]	; (800183c <SystemClock_Config+0xb8>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	4a22      	ldr	r2, [pc, #136]	; (800183c <SystemClock_Config+0xb8>)
 80017b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b6:	6413      	str	r3, [r2, #64]	; 0x40
 80017b8:	4b20      	ldr	r3, [pc, #128]	; (800183c <SystemClock_Config+0xb8>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017c4:	2300      	movs	r3, #0
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <SystemClock_Config+0xbc>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017d0:	4a1b      	ldr	r2, [pc, #108]	; (8001840 <SystemClock_Config+0xbc>)
 80017d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	4b19      	ldr	r3, [pc, #100]	; (8001840 <SystemClock_Config+0xbc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017e0:	603b      	str	r3, [r7, #0]
 80017e2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017e4:	2302      	movs	r3, #2
 80017e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017e8:	2301      	movs	r3, #1
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017ec:	2310      	movs	r3, #16
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	4618      	mov	r0, r3
 80017fa:	f001 f8af 	bl	800295c <HAL_RCC_OscConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001804:	f000 f95e 	bl	8001ac4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001808:	230f      	movs	r3, #15
 800180a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001818:	2300      	movs	r3, #0
 800181a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f000 fe24 	bl	8002470 <HAL_RCC_ClockConfig>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800182e:	f000 f949 	bl	8001ac4 <Error_Handler>
  }
}
 8001832:	bf00      	nop
 8001834:	3750      	adds	r7, #80	; 0x50
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800
 8001840:	40007000 	.word	0x40007000

08001844 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_USART2_UART_Init+0x4c>)
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <MX_USART2_UART_Init+0x50>)
 800184c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <MX_USART2_UART_Init+0x4c>)
 8001850:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001854:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_USART2_UART_Init+0x4c>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_USART2_UART_Init+0x4c>)
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <MX_USART2_UART_Init+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_USART2_UART_Init+0x4c>)
 800186a:	220c      	movs	r2, #12
 800186c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <MX_USART2_UART_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_USART2_UART_Init+0x4c>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_USART2_UART_Init+0x4c>)
 800187c:	f001 fb0c 	bl	8002e98 <HAL_UART_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001886:	f000 f91d 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000050 	.word	0x20000050
 8001894:	40004400 	.word	0x40004400

08001898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	4b50      	ldr	r3, [pc, #320]	; (80019e4 <MX_GPIO_Init+0x14c>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a4f      	ldr	r2, [pc, #316]	; (80019e4 <MX_GPIO_Init+0x14c>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b4d      	ldr	r3, [pc, #308]	; (80019e4 <MX_GPIO_Init+0x14c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b45      	ldr	r3, [pc, #276]	; (80019e4 <MX_GPIO_Init+0x14c>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a44      	ldr	r2, [pc, #272]	; (80019e4 <MX_GPIO_Init+0x14c>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b42      	ldr	r3, [pc, #264]	; (80019e4 <MX_GPIO_Init+0x14c>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	4b3e      	ldr	r3, [pc, #248]	; (80019e4 <MX_GPIO_Init+0x14c>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a3d      	ldr	r2, [pc, #244]	; (80019e4 <MX_GPIO_Init+0x14c>)
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b3b      	ldr	r3, [pc, #236]	; (80019e4 <MX_GPIO_Init+0x14c>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	4b37      	ldr	r3, [pc, #220]	; (80019e4 <MX_GPIO_Init+0x14c>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a36      	ldr	r2, [pc, #216]	; (80019e4 <MX_GPIO_Init+0x14c>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b34      	ldr	r3, [pc, #208]	; (80019e4 <MX_GPIO_Init+0x14c>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <MX_GPIO_Init+0x14c>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a2f      	ldr	r2, [pc, #188]	; (80019e4 <MX_GPIO_Init+0x14c>)
 8001928:	f043 0308 	orr.w	r3, r3, #8
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b2d      	ldr	r3, [pc, #180]	; (80019e4 <MX_GPIO_Init+0x14c>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800193a:	2200      	movs	r2, #0
 800193c:	f649 4140 	movw	r1, #40000	; 0x9c40
 8001940:	4829      	ldr	r0, [pc, #164]	; (80019e8 <MX_GPIO_Init+0x150>)
 8001942:	f000 fd7b 	bl	800243c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001946:	2200      	movs	r2, #0
 8001948:	f641 4110 	movw	r1, #7184	; 0x1c10
 800194c:	4827      	ldr	r0, [pc, #156]	; (80019ec <MX_GPIO_Init+0x154>)
 800194e:	f000 fd75 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	210a      	movs	r1, #10
 8001956:	4826      	ldr	r0, [pc, #152]	; (80019f0 <MX_GPIO_Init+0x158>)
 8001958:	f000 fd70 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	2104      	movs	r1, #4
 8001960:	4824      	ldr	r0, [pc, #144]	; (80019f4 <MX_GPIO_Init+0x15c>)
 8001962:	f000 fd6b 	bl	800243c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001966:	f649 4340 	movw	r3, #40000	; 0x9c40
 800196a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196c:	2301      	movs	r3, #1
 800196e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	4619      	mov	r1, r3
 800197e:	481a      	ldr	r0, [pc, #104]	; (80019e8 <MX_GPIO_Init+0x150>)
 8001980:	f000 fbc8 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001984:	f641 4310 	movw	r3, #7184	; 0x1c10
 8001988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198a:	2301      	movs	r3, #1
 800198c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	4813      	ldr	r0, [pc, #76]	; (80019ec <MX_GPIO_Init+0x154>)
 800199e:	f000 fbb9 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80019a2:	230a      	movs	r3, #10
 80019a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a6:	2301      	movs	r3, #1
 80019a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4619      	mov	r1, r3
 80019b8:	480d      	ldr	r0, [pc, #52]	; (80019f0 <MX_GPIO_Init+0x158>)
 80019ba:	f000 fbab 	bl	8002114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019be:	2304      	movs	r3, #4
 80019c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c2:	2301      	movs	r3, #1
 80019c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ce:	f107 0314 	add.w	r3, r7, #20
 80019d2:	4619      	mov	r1, r3
 80019d4:	4807      	ldr	r0, [pc, #28]	; (80019f4 <MX_GPIO_Init+0x15c>)
 80019d6:	f000 fb9d 	bl	8002114 <HAL_GPIO_Init>


}
 80019da:	bf00      	nop
 80019dc:	3728      	adds	r7, #40	; 0x28
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40020000 	.word	0x40020000
 80019ec:	40020800 	.word	0x40020800
 80019f0:	40020400 	.word	0x40020400
 80019f4:	40020c00 	.word	0x40020c00

080019f8 <HAL_UART_RxCpltCallback>:
{
	HAL_UART_Transmit_IT(&huart2, output_data, output_package_size);
}
*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart2, output_data, output_package_size);
 8001a00:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <HAL_UART_RxCpltCallback+0x7c>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	491c      	ldr	r1, [pc, #112]	; (8001a78 <HAL_UART_RxCpltCallback+0x80>)
 8001a08:	481c      	ldr	r0, [pc, #112]	; (8001a7c <HAL_UART_RxCpltCallback+0x84>)
 8001a0a:	f001 fa92 	bl	8002f32 <HAL_UART_Transmit_IT>
	count = unpack_data(input_data);
 8001a0e:	481c      	ldr	r0, [pc, #112]	; (8001a80 <HAL_UART_RxCpltCallback+0x88>)
 8001a10:	f7ff f98e 	bl	8000d30 <unpack_data>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	491a      	ldr	r1, [pc, #104]	; (8001a84 <HAL_UART_RxCpltCallback+0x8c>)
 8001a1a:	e9c1 2300 	strd	r2, r3, [r1]
	answer = sin(count);
 8001a1e:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <HAL_UART_RxCpltCallback+0x8c>)
 8001a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f7fe fea6 	bl	8000778 <__aeabi_l2d>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	ec43 2b10 	vmov	d0, r2, r3
 8001a34:	f002 f9a4 	bl	8003d80 <sin>
 8001a38:	eeb0 7a40 	vmov.f32	s14, s0
 8001a3c:	eef0 7a60 	vmov.f32	s15, s1
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_UART_RxCpltCallback+0x90>)
 8001a42:	ed83 7b00 	vstr	d7, [r3]
	send_data(answer, output_package_size);
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <HAL_UART_RxCpltCallback+0x90>)
 8001a48:	ed93 7b00 	vldr	d7, [r3]
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_UART_RxCpltCallback+0x7c>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	eeb0 0a47 	vmov.f32	s0, s14
 8001a56:	eef0 0a67 	vmov.f32	s1, s15
 8001a5a:	f7ff fa63 	bl	8000f24 <send_data>
    HAL_UART_Transmit_IT(&huart2, output_data, output_package_size);
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_UART_RxCpltCallback+0x7c>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	4904      	ldr	r1, [pc, #16]	; (8001a78 <HAL_UART_RxCpltCallback+0x80>)
 8001a66:	4805      	ldr	r0, [pc, #20]	; (8001a7c <HAL_UART_RxCpltCallback+0x84>)
 8001a68:	f001 fa63 	bl	8002f32 <HAL_UART_Transmit_IT>

}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000012 	.word	0x20000012
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	20000050 	.word	0x20000050
 8001a80:	20000000 	.word	0x20000000
 8001a84:	20000040 	.word	0x20000040
 8001a88:	20000048 	.word	0x20000048

08001a8c <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  memset(input_data, 0, input_package_size); //тут мы почистили память, тут точно было накакано
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <HAL_UART_TxCpltCallback+0x2c>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4807      	ldr	r0, [pc, #28]	; (8001abc <HAL_UART_TxCpltCallback+0x30>)
 8001a9e:	f002 f921 	bl	8003ce4 <memset>
  HAL_UART_Receive_IT (&huart2, input_data, input_package_size); // запуск приема следующего пакета
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_UART_TxCpltCallback+0x2c>)
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4904      	ldr	r1, [pc, #16]	; (8001abc <HAL_UART_TxCpltCallback+0x30>)
 8001aaa:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <HAL_UART_TxCpltCallback+0x34>)
 8001aac:	f001 fa86 	bl	8002fbc <HAL_UART_Receive_IT>
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000010 	.word	0x20000010
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	20000050 	.word	0x20000050

08001ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac8:	b672      	cpsid	i
}
 8001aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001acc:	e7fe      	b.n	8001acc <Error_Handler+0x8>
	...

08001ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <HAL_MspInit+0x4c>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	4a0f      	ldr	r2, [pc, #60]	; (8001b1c <HAL_MspInit+0x4c>)
 8001ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <HAL_MspInit+0x4c>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_MspInit+0x4c>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	4a08      	ldr	r2, [pc, #32]	; (8001b1c <HAL_MspInit+0x4c>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	6413      	str	r3, [r2, #64]	; 0x40
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_MspInit+0x4c>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800

08001b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	; 0x28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a1d      	ldr	r2, [pc, #116]	; (8001bb4 <HAL_UART_MspInit+0x94>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d133      	bne.n	8001baa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <HAL_UART_MspInit+0x98>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	4a1b      	ldr	r2, [pc, #108]	; (8001bb8 <HAL_UART_MspInit+0x98>)
 8001b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b50:	6413      	str	r3, [r2, #64]	; 0x40
 8001b52:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <HAL_UART_MspInit+0x98>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_UART_MspInit+0x98>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a14      	ldr	r2, [pc, #80]	; (8001bb8 <HAL_UART_MspInit+0x98>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_UART_MspInit+0x98>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b7a:	230c      	movs	r3, #12
 8001b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b86:	2303      	movs	r3, #3
 8001b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b8a:	2307      	movs	r3, #7
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	4619      	mov	r1, r3
 8001b94:	4809      	ldr	r0, [pc, #36]	; (8001bbc <HAL_UART_MspInit+0x9c>)
 8001b96:	f000 fabd 	bl	8002114 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2026      	movs	r0, #38	; 0x26
 8001ba0:	f000 f9ef 	bl	8001f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ba4:	2026      	movs	r0, #38	; 0x26
 8001ba6:	f000 fa08 	bl	8001fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001baa:	bf00      	nop
 8001bac:	3728      	adds	r7, #40	; 0x28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40004400 	.word	0x40004400
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020000 	.word	0x40020000

08001bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <NMI_Handler+0x4>

08001bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bca:	e7fe      	b.n	8001bca <HardFault_Handler+0x4>

08001bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <MemManage_Handler+0x4>

08001bd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <BusFault_Handler+0x4>

08001bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <UsageFault_Handler+0x4>

08001bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c0c:	f000 f89a 	bl	8001d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <USART2_IRQHandler+0x10>)
 8001c1a:	f001 f9ff 	bl	800301c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000050 	.word	0x20000050

08001c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <SystemInit+0x20>)
 8001c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c32:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <SystemInit+0x20>)
 8001c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c50:	480d      	ldr	r0, [pc, #52]	; (8001c88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c52:	490e      	ldr	r1, [pc, #56]	; (8001c8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c54:	4a0e      	ldr	r2, [pc, #56]	; (8001c90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c58:	e002      	b.n	8001c60 <LoopCopyDataInit>

08001c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5e:	3304      	adds	r3, #4

08001c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c64:	d3f9      	bcc.n	8001c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c66:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c68:	4c0b      	ldr	r4, [pc, #44]	; (8001c98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c6c:	e001      	b.n	8001c72 <LoopFillZerobss>

08001c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c70:	3204      	adds	r2, #4

08001c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c74:	d3fb      	bcc.n	8001c6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c76:	f7ff ffd7 	bl	8001c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c7a:	f002 f80f 	bl	8003c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c7e:	f7ff f825 	bl	8000ccc <main>
  bx  lr    
 8001c82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c8c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001c90:	08005008 	.word	0x08005008
  ldr r2, =_sbss
 8001c94:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001c98:	20000098 	.word	0x20000098

08001c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c9c:	e7fe      	b.n	8001c9c <ADC_IRQHandler>
	...

08001ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ca4:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <HAL_Init+0x40>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	; (8001ce0 <HAL_Init+0x40>)
 8001caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_Init+0x40>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <HAL_Init+0x40>)
 8001cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <HAL_Init+0x40>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a07      	ldr	r2, [pc, #28]	; (8001ce0 <HAL_Init+0x40>)
 8001cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc8:	2003      	movs	r0, #3
 8001cca:	f000 f94f 	bl	8001f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f000 f808 	bl	8001ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd4:	f7ff fefc 	bl	8001ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023c00 	.word	0x40023c00

08001ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_InitTick+0x54>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_InitTick+0x58>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 f967 	bl	8001fd6 <HAL_SYSTICK_Config>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e00e      	b.n	8001d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b0f      	cmp	r3, #15
 8001d16:	d80a      	bhi.n	8001d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d20:	f000 f92f 	bl	8001f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d24:	4a06      	ldr	r2, [pc, #24]	; (8001d40 <HAL_InitTick+0x5c>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e000      	b.n	8001d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000014 	.word	0x20000014
 8001d3c:	2000001c 	.word	0x2000001c
 8001d40:	20000018 	.word	0x20000018

08001d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_IncTick+0x20>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_IncTick+0x24>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <HAL_IncTick+0x24>)
 8001d56:	6013      	str	r3, [r2, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	2000001c 	.word	0x2000001c
 8001d68:	20000094 	.word	0x20000094

08001d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <HAL_GetTick+0x14>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000094 	.word	0x20000094

08001d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d8c:	f7ff ffee 	bl	8001d6c <HAL_GetTick>
 8001d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9c:	d005      	beq.n	8001daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_Delay+0x44>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4413      	add	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001daa:	bf00      	nop
 8001dac:	f7ff ffde 	bl	8001d6c <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d8f7      	bhi.n	8001dac <HAL_Delay+0x28>
  {
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	2000001c 	.word	0x2000001c

08001dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de8:	4013      	ands	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfe:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	60d3      	str	r3, [r2, #12]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <__NVIC_GetPriorityGrouping+0x18>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	f003 0307 	and.w	r3, r3, #7
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	db0b      	blt.n	8001e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	f003 021f 	and.w	r2, r3, #31
 8001e48:	4907      	ldr	r1, [pc, #28]	; (8001e68 <__NVIC_EnableIRQ+0x38>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	2001      	movs	r0, #1
 8001e52:	fa00 f202 	lsl.w	r2, r0, r2
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000e100 	.word	0xe000e100

08001e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	6039      	str	r1, [r7, #0]
 8001e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	db0a      	blt.n	8001e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	490c      	ldr	r1, [pc, #48]	; (8001eb8 <__NVIC_SetPriority+0x4c>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	0112      	lsls	r2, r2, #4
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	440b      	add	r3, r1
 8001e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e94:	e00a      	b.n	8001eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4908      	ldr	r1, [pc, #32]	; (8001ebc <__NVIC_SetPriority+0x50>)
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	3b04      	subs	r3, #4
 8001ea4:	0112      	lsls	r2, r2, #4
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	761a      	strb	r2, [r3, #24]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000e100 	.word	0xe000e100
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	; 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f1c3 0307 	rsb	r3, r3, #7
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	bf28      	it	cs
 8001ede:	2304      	movcs	r3, #4
 8001ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	2b06      	cmp	r3, #6
 8001ee8:	d902      	bls.n	8001ef0 <NVIC_EncodePriority+0x30>
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3b03      	subs	r3, #3
 8001eee:	e000      	b.n	8001ef2 <NVIC_EncodePriority+0x32>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	401a      	ands	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f08:	f04f 31ff 	mov.w	r1, #4294967295
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	43d9      	mvns	r1, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	4313      	orrs	r3, r2
         );
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3724      	adds	r7, #36	; 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f38:	d301      	bcc.n	8001f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00f      	b.n	8001f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <SysTick_Config+0x40>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f46:	210f      	movs	r1, #15
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f7ff ff8e 	bl	8001e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <SysTick_Config+0x40>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f56:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <SysTick_Config+0x40>)
 8001f58:	2207      	movs	r2, #7
 8001f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	e000e010 	.word	0xe000e010

08001f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ff29 	bl	8001dcc <__NVIC_SetPriorityGrouping>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f94:	f7ff ff3e 	bl	8001e14 <__NVIC_GetPriorityGrouping>
 8001f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	6978      	ldr	r0, [r7, #20]
 8001fa0:	f7ff ff8e 	bl	8001ec0 <NVIC_EncodePriority>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff5d 	bl	8001e6c <__NVIC_SetPriority>
}
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff31 	bl	8001e30 <__NVIC_EnableIRQ>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ffa2 	bl	8001f28 <SysTick_Config>
 8001fe4:	4603      	mov	r3, r0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b084      	sub	sp, #16
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ffc:	f7ff feb6 	bl	8001d6c <HAL_GetTick>
 8002000:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d008      	beq.n	8002020 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2280      	movs	r2, #128	; 0x80
 8002012:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e052      	b.n	80020c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0216 	bic.w	r2, r2, #22
 800202e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800203e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	2b00      	cmp	r3, #0
 8002046:	d103      	bne.n	8002050 <HAL_DMA_Abort+0x62>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800204c:	2b00      	cmp	r3, #0
 800204e:	d007      	beq.n	8002060 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0208 	bic.w	r2, r2, #8
 800205e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0201 	bic.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002070:	e013      	b.n	800209a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002072:	f7ff fe7b 	bl	8001d6c <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b05      	cmp	r3, #5
 800207e:	d90c      	bls.n	800209a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2220      	movs	r2, #32
 8002084:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2203      	movs	r2, #3
 800208a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e015      	b.n	80020c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1e4      	bne.n	8002072 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ac:	223f      	movs	r2, #63	; 0x3f
 80020ae:	409a      	lsls	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d004      	beq.n	80020ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2280      	movs	r2, #128	; 0x80
 80020e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e00c      	b.n	8002106 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2205      	movs	r2, #5
 80020f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0201 	bic.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002114:	b480      	push	{r7}
 8002116:	b089      	sub	sp, #36	; 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	e165      	b.n	80023fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002130:	2201      	movs	r2, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	429a      	cmp	r2, r3
 800214a:	f040 8154 	bne.w	80023f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d005      	beq.n	8002166 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002162:	2b02      	cmp	r3, #2
 8002164:	d130      	bne.n	80021c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	2203      	movs	r2, #3
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800219c:	2201      	movs	r2, #1
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 0201 	and.w	r2, r3, #1
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d017      	beq.n	8002204 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d123      	bne.n	8002258 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	08da      	lsrs	r2, r3, #3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3208      	adds	r2, #8
 8002218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	220f      	movs	r2, #15
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	08da      	lsrs	r2, r3, #3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3208      	adds	r2, #8
 8002252:	69b9      	ldr	r1, [r7, #24]
 8002254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0203 	and.w	r2, r3, #3
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80ae 	beq.w	80023f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	4b5d      	ldr	r3, [pc, #372]	; (8002414 <HAL_GPIO_Init+0x300>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	4a5c      	ldr	r2, [pc, #368]	; (8002414 <HAL_GPIO_Init+0x300>)
 80022a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a8:	6453      	str	r3, [r2, #68]	; 0x44
 80022aa:	4b5a      	ldr	r3, [pc, #360]	; (8002414 <HAL_GPIO_Init+0x300>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022b6:	4a58      	ldr	r2, [pc, #352]	; (8002418 <HAL_GPIO_Init+0x304>)
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	3302      	adds	r3, #2
 80022be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	220f      	movs	r2, #15
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a4f      	ldr	r2, [pc, #316]	; (800241c <HAL_GPIO_Init+0x308>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d025      	beq.n	800232e <HAL_GPIO_Init+0x21a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a4e      	ldr	r2, [pc, #312]	; (8002420 <HAL_GPIO_Init+0x30c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d01f      	beq.n	800232a <HAL_GPIO_Init+0x216>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a4d      	ldr	r2, [pc, #308]	; (8002424 <HAL_GPIO_Init+0x310>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d019      	beq.n	8002326 <HAL_GPIO_Init+0x212>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <HAL_GPIO_Init+0x314>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d013      	beq.n	8002322 <HAL_GPIO_Init+0x20e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a4b      	ldr	r2, [pc, #300]	; (800242c <HAL_GPIO_Init+0x318>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00d      	beq.n	800231e <HAL_GPIO_Init+0x20a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4a      	ldr	r2, [pc, #296]	; (8002430 <HAL_GPIO_Init+0x31c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d007      	beq.n	800231a <HAL_GPIO_Init+0x206>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a49      	ldr	r2, [pc, #292]	; (8002434 <HAL_GPIO_Init+0x320>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d101      	bne.n	8002316 <HAL_GPIO_Init+0x202>
 8002312:	2306      	movs	r3, #6
 8002314:	e00c      	b.n	8002330 <HAL_GPIO_Init+0x21c>
 8002316:	2307      	movs	r3, #7
 8002318:	e00a      	b.n	8002330 <HAL_GPIO_Init+0x21c>
 800231a:	2305      	movs	r3, #5
 800231c:	e008      	b.n	8002330 <HAL_GPIO_Init+0x21c>
 800231e:	2304      	movs	r3, #4
 8002320:	e006      	b.n	8002330 <HAL_GPIO_Init+0x21c>
 8002322:	2303      	movs	r3, #3
 8002324:	e004      	b.n	8002330 <HAL_GPIO_Init+0x21c>
 8002326:	2302      	movs	r3, #2
 8002328:	e002      	b.n	8002330 <HAL_GPIO_Init+0x21c>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_GPIO_Init+0x21c>
 800232e:	2300      	movs	r3, #0
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	f002 0203 	and.w	r2, r2, #3
 8002336:	0092      	lsls	r2, r2, #2
 8002338:	4093      	lsls	r3, r2
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002340:	4935      	ldr	r1, [pc, #212]	; (8002418 <HAL_GPIO_Init+0x304>)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	3302      	adds	r3, #2
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800234e:	4b3a      	ldr	r3, [pc, #232]	; (8002438 <HAL_GPIO_Init+0x324>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002372:	4a31      	ldr	r2, [pc, #196]	; (8002438 <HAL_GPIO_Init+0x324>)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002378:	4b2f      	ldr	r3, [pc, #188]	; (8002438 <HAL_GPIO_Init+0x324>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800239c:	4a26      	ldr	r2, [pc, #152]	; (8002438 <HAL_GPIO_Init+0x324>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023a2:	4b25      	ldr	r3, [pc, #148]	; (8002438 <HAL_GPIO_Init+0x324>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023c6:	4a1c      	ldr	r2, [pc, #112]	; (8002438 <HAL_GPIO_Init+0x324>)
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023cc:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <HAL_GPIO_Init+0x324>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023f0:	4a11      	ldr	r2, [pc, #68]	; (8002438 <HAL_GPIO_Init+0x324>)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3301      	adds	r3, #1
 80023fa:	61fb      	str	r3, [r7, #28]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	2b0f      	cmp	r3, #15
 8002400:	f67f ae96 	bls.w	8002130 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002404:	bf00      	nop
 8002406:	bf00      	nop
 8002408:	3724      	adds	r7, #36	; 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
 8002418:	40013800 	.word	0x40013800
 800241c:	40020000 	.word	0x40020000
 8002420:	40020400 	.word	0x40020400
 8002424:	40020800 	.word	0x40020800
 8002428:	40020c00 	.word	0x40020c00
 800242c:	40021000 	.word	0x40021000
 8002430:	40021400 	.word	0x40021400
 8002434:	40021800 	.word	0x40021800
 8002438:	40013c00 	.word	0x40013c00

0800243c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	807b      	strh	r3, [r7, #2]
 8002448:	4613      	mov	r3, r2
 800244a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800244c:	787b      	ldrb	r3, [r7, #1]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002452:	887a      	ldrh	r2, [r7, #2]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002458:	e003      	b.n	8002462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800245a:	887b      	ldrh	r3, [r7, #2]
 800245c:	041a      	lsls	r2, r3, #16
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	619a      	str	r2, [r3, #24]
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0cc      	b.n	800261e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002484:	4b68      	ldr	r3, [pc, #416]	; (8002628 <HAL_RCC_ClockConfig+0x1b8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d90c      	bls.n	80024ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b65      	ldr	r3, [pc, #404]	; (8002628 <HAL_RCC_ClockConfig+0x1b8>)
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b63      	ldr	r3, [pc, #396]	; (8002628 <HAL_RCC_ClockConfig+0x1b8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0b8      	b.n	800261e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d020      	beq.n	80024fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c4:	4b59      	ldr	r3, [pc, #356]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4a58      	ldr	r2, [pc, #352]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024dc:	4b53      	ldr	r3, [pc, #332]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	4a52      	ldr	r2, [pc, #328]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e8:	4b50      	ldr	r3, [pc, #320]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	494d      	ldr	r1, [pc, #308]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d044      	beq.n	8002590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d107      	bne.n	800251e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250e:	4b47      	ldr	r3, [pc, #284]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d119      	bne.n	800254e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e07f      	b.n	800261e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d003      	beq.n	800252e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800252a:	2b03      	cmp	r3, #3
 800252c:	d107      	bne.n	800253e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252e:	4b3f      	ldr	r3, [pc, #252]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d109      	bne.n	800254e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e06f      	b.n	800261e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253e:	4b3b      	ldr	r3, [pc, #236]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e067      	b.n	800261e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254e:	4b37      	ldr	r3, [pc, #220]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f023 0203 	bic.w	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	4934      	ldr	r1, [pc, #208]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	4313      	orrs	r3, r2
 800255e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002560:	f7ff fc04 	bl	8001d6c <HAL_GetTick>
 8002564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002566:	e00a      	b.n	800257e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002568:	f7ff fc00 	bl	8001d6c <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	; 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e04f      	b.n	800261e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257e:	4b2b      	ldr	r3, [pc, #172]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 020c 	and.w	r2, r3, #12
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	429a      	cmp	r2, r3
 800258e:	d1eb      	bne.n	8002568 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002590:	4b25      	ldr	r3, [pc, #148]	; (8002628 <HAL_RCC_ClockConfig+0x1b8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d20c      	bcs.n	80025b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b22      	ldr	r3, [pc, #136]	; (8002628 <HAL_RCC_ClockConfig+0x1b8>)
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b20      	ldr	r3, [pc, #128]	; (8002628 <HAL_RCC_ClockConfig+0x1b8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e032      	b.n	800261e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c4:	4b19      	ldr	r3, [pc, #100]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4916      	ldr	r1, [pc, #88]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025e2:	4b12      	ldr	r3, [pc, #72]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	490e      	ldr	r1, [pc, #56]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025f6:	f000 f855 	bl	80026a4 <HAL_RCC_GetSysClockFreq>
 80025fa:	4602      	mov	r2, r0
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	490a      	ldr	r1, [pc, #40]	; (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 8002608:	5ccb      	ldrb	r3, [r1, r3]
 800260a:	fa22 f303 	lsr.w	r3, r2, r3
 800260e:	4a09      	ldr	r2, [pc, #36]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <HAL_RCC_ClockConfig+0x1c8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fb64 	bl	8001ce4 <HAL_InitTick>

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40023c00 	.word	0x40023c00
 800262c:	40023800 	.word	0x40023800
 8002630:	08004e08 	.word	0x08004e08
 8002634:	20000014 	.word	0x20000014
 8002638:	20000018 	.word	0x20000018

0800263c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002640:	4b03      	ldr	r3, [pc, #12]	; (8002650 <HAL_RCC_GetHCLKFreq+0x14>)
 8002642:	681b      	ldr	r3, [r3, #0]
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	20000014 	.word	0x20000014

08002654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002658:	f7ff fff0 	bl	800263c <HAL_RCC_GetHCLKFreq>
 800265c:	4602      	mov	r2, r0
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	0a9b      	lsrs	r3, r3, #10
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	4903      	ldr	r1, [pc, #12]	; (8002678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800266a:	5ccb      	ldrb	r3, [r1, r3]
 800266c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002670:	4618      	mov	r0, r3
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40023800 	.word	0x40023800
 8002678:	08004e18 	.word	0x08004e18

0800267c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002680:	f7ff ffdc 	bl	800263c <HAL_RCC_GetHCLKFreq>
 8002684:	4602      	mov	r2, r0
 8002686:	4b05      	ldr	r3, [pc, #20]	; (800269c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	0b5b      	lsrs	r3, r3, #13
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	4903      	ldr	r1, [pc, #12]	; (80026a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002692:	5ccb      	ldrb	r3, [r1, r3]
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40023800 	.word	0x40023800
 80026a0:	08004e18 	.word	0x08004e18

080026a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026a8:	b087      	sub	sp, #28
 80026aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026ac:	2600      	movs	r6, #0
 80026ae:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 80026b0:	2600      	movs	r6, #0
 80026b2:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 80026b4:	2600      	movs	r6, #0
 80026b6:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 80026b8:	2600      	movs	r6, #0
 80026ba:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026bc:	2600      	movs	r6, #0
 80026be:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026c0:	4ea3      	ldr	r6, [pc, #652]	; (8002950 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80026c2:	68b6      	ldr	r6, [r6, #8]
 80026c4:	f006 060c 	and.w	r6, r6, #12
 80026c8:	2e0c      	cmp	r6, #12
 80026ca:	f200 8137 	bhi.w	800293c <HAL_RCC_GetSysClockFreq+0x298>
 80026ce:	f20f 0c08 	addw	ip, pc, #8
 80026d2:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 80026d6:	bf00      	nop
 80026d8:	0800270d 	.word	0x0800270d
 80026dc:	0800293d 	.word	0x0800293d
 80026e0:	0800293d 	.word	0x0800293d
 80026e4:	0800293d 	.word	0x0800293d
 80026e8:	08002713 	.word	0x08002713
 80026ec:	0800293d 	.word	0x0800293d
 80026f0:	0800293d 	.word	0x0800293d
 80026f4:	0800293d 	.word	0x0800293d
 80026f8:	08002719 	.word	0x08002719
 80026fc:	0800293d 	.word	0x0800293d
 8002700:	0800293d 	.word	0x0800293d
 8002704:	0800293d 	.word	0x0800293d
 8002708:	0800282f 	.word	0x0800282f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800270c:	4b91      	ldr	r3, [pc, #580]	; (8002954 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800270e:	613b      	str	r3, [r7, #16]
       break;
 8002710:	e117      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002712:	4b91      	ldr	r3, [pc, #580]	; (8002958 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002714:	613b      	str	r3, [r7, #16]
      break;
 8002716:	e114      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002718:	4b8d      	ldr	r3, [pc, #564]	; (8002950 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002720:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002722:	4b8b      	ldr	r3, [pc, #556]	; (8002950 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d024      	beq.n	8002778 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800272e:	4b88      	ldr	r3, [pc, #544]	; (8002950 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	099b      	lsrs	r3, r3, #6
 8002734:	461a      	mov	r2, r3
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	f240 14ff 	movw	r4, #511	; 0x1ff
 800273e:	f04f 0500 	mov.w	r5, #0
 8002742:	ea02 0004 	and.w	r0, r2, r4
 8002746:	ea03 0105 	and.w	r1, r3, r5
 800274a:	4b83      	ldr	r3, [pc, #524]	; (8002958 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800274c:	fb03 f201 	mul.w	r2, r3, r1
 8002750:	2300      	movs	r3, #0
 8002752:	fb03 f300 	mul.w	r3, r3, r0
 8002756:	4413      	add	r3, r2
 8002758:	4a7f      	ldr	r2, [pc, #508]	; (8002958 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800275a:	fba0 0102 	umull	r0, r1, r0, r2
 800275e:	440b      	add	r3, r1
 8002760:	4619      	mov	r1, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	461a      	mov	r2, r3
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	f7fe f933 	bl	80009d4 <__aeabi_uldivmod>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4613      	mov	r3, r2
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	e04c      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002778:	4b75      	ldr	r3, [pc, #468]	; (8002950 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	099b      	lsrs	r3, r3, #6
 800277e:	461a      	mov	r2, r3
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002788:	f04f 0100 	mov.w	r1, #0
 800278c:	ea02 0800 	and.w	r8, r2, r0
 8002790:	ea03 0901 	and.w	r9, r3, r1
 8002794:	4640      	mov	r0, r8
 8002796:	4649      	mov	r1, r9
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	014b      	lsls	r3, r1, #5
 80027a2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027a6:	0142      	lsls	r2, r0, #5
 80027a8:	4610      	mov	r0, r2
 80027aa:	4619      	mov	r1, r3
 80027ac:	ebb0 0008 	subs.w	r0, r0, r8
 80027b0:	eb61 0109 	sbc.w	r1, r1, r9
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	018b      	lsls	r3, r1, #6
 80027be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027c2:	0182      	lsls	r2, r0, #6
 80027c4:	1a12      	subs	r2, r2, r0
 80027c6:	eb63 0301 	sbc.w	r3, r3, r1
 80027ca:	f04f 0000 	mov.w	r0, #0
 80027ce:	f04f 0100 	mov.w	r1, #0
 80027d2:	00d9      	lsls	r1, r3, #3
 80027d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027d8:	00d0      	lsls	r0, r2, #3
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	eb12 0208 	adds.w	r2, r2, r8
 80027e2:	eb43 0309 	adc.w	r3, r3, r9
 80027e6:	f04f 0000 	mov.w	r0, #0
 80027ea:	f04f 0100 	mov.w	r1, #0
 80027ee:	0299      	lsls	r1, r3, #10
 80027f0:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80027f4:	0290      	lsls	r0, r2, #10
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4610      	mov	r0, r2
 80027fc:	4619      	mov	r1, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	461a      	mov	r2, r3
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	f7fe f8e5 	bl	80009d4 <__aeabi_uldivmod>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4613      	mov	r3, r2
 8002810:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002812:	4b4f      	ldr	r3, [pc, #316]	; (8002950 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	0c1b      	lsrs	r3, r3, #16
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	3301      	adds	r3, #1
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	fbb2 f3f3 	udiv	r3, r2, r3
 800282a:	613b      	str	r3, [r7, #16]
      break;
 800282c:	e089      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800282e:	4948      	ldr	r1, [pc, #288]	; (8002950 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002830:	6849      	ldr	r1, [r1, #4]
 8002832:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002836:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002838:	4945      	ldr	r1, [pc, #276]	; (8002950 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800283a:	6849      	ldr	r1, [r1, #4]
 800283c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002840:	2900      	cmp	r1, #0
 8002842:	d024      	beq.n	800288e <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002844:	4942      	ldr	r1, [pc, #264]	; (8002950 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002846:	6849      	ldr	r1, [r1, #4]
 8002848:	0989      	lsrs	r1, r1, #6
 800284a:	4608      	mov	r0, r1
 800284c:	f04f 0100 	mov.w	r1, #0
 8002850:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002854:	f04f 0500 	mov.w	r5, #0
 8002858:	ea00 0204 	and.w	r2, r0, r4
 800285c:	ea01 0305 	and.w	r3, r1, r5
 8002860:	493d      	ldr	r1, [pc, #244]	; (8002958 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002862:	fb01 f003 	mul.w	r0, r1, r3
 8002866:	2100      	movs	r1, #0
 8002868:	fb01 f102 	mul.w	r1, r1, r2
 800286c:	1844      	adds	r4, r0, r1
 800286e:	493a      	ldr	r1, [pc, #232]	; (8002958 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002870:	fba2 0101 	umull	r0, r1, r2, r1
 8002874:	1863      	adds	r3, r4, r1
 8002876:	4619      	mov	r1, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	461a      	mov	r2, r3
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	f7fe f8a8 	bl	80009d4 <__aeabi_uldivmod>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4613      	mov	r3, r2
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	e04a      	b.n	8002924 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800288e:	4b30      	ldr	r3, [pc, #192]	; (8002950 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	099b      	lsrs	r3, r3, #6
 8002894:	461a      	mov	r2, r3
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800289e:	f04f 0100 	mov.w	r1, #0
 80028a2:	ea02 0400 	and.w	r4, r2, r0
 80028a6:	ea03 0501 	and.w	r5, r3, r1
 80028aa:	4620      	mov	r0, r4
 80028ac:	4629      	mov	r1, r5
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	014b      	lsls	r3, r1, #5
 80028b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028bc:	0142      	lsls	r2, r0, #5
 80028be:	4610      	mov	r0, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	1b00      	subs	r0, r0, r4
 80028c4:	eb61 0105 	sbc.w	r1, r1, r5
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	018b      	lsls	r3, r1, #6
 80028d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028d6:	0182      	lsls	r2, r0, #6
 80028d8:	1a12      	subs	r2, r2, r0
 80028da:	eb63 0301 	sbc.w	r3, r3, r1
 80028de:	f04f 0000 	mov.w	r0, #0
 80028e2:	f04f 0100 	mov.w	r1, #0
 80028e6:	00d9      	lsls	r1, r3, #3
 80028e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028ec:	00d0      	lsls	r0, r2, #3
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	1912      	adds	r2, r2, r4
 80028f4:	eb45 0303 	adc.w	r3, r5, r3
 80028f8:	f04f 0000 	mov.w	r0, #0
 80028fc:	f04f 0100 	mov.w	r1, #0
 8002900:	0299      	lsls	r1, r3, #10
 8002902:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002906:	0290      	lsls	r0, r2, #10
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4610      	mov	r0, r2
 800290e:	4619      	mov	r1, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	461a      	mov	r2, r3
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	f7fe f85c 	bl	80009d4 <__aeabi_uldivmod>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4613      	mov	r3, r2
 8002922:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002924:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	0f1b      	lsrs	r3, r3, #28
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	fbb2 f3f3 	udiv	r3, r2, r3
 8002938:	613b      	str	r3, [r7, #16]
      break;
 800293a:	e002      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800293e:	613b      	str	r3, [r7, #16]
      break;
 8002940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002942:	693b      	ldr	r3, [r7, #16]
}
 8002944:	4618      	mov	r0, r3
 8002946:	371c      	adds	r7, #28
 8002948:	46bd      	mov	sp, r7
 800294a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800
 8002954:	00f42400 	.word	0x00f42400
 8002958:	017d7840 	.word	0x017d7840

0800295c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e28d      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8083 	beq.w	8002a82 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800297c:	4b94      	ldr	r3, [pc, #592]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 030c 	and.w	r3, r3, #12
 8002984:	2b04      	cmp	r3, #4
 8002986:	d019      	beq.n	80029bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002988:	4b91      	ldr	r3, [pc, #580]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002990:	2b08      	cmp	r3, #8
 8002992:	d106      	bne.n	80029a2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002994:	4b8e      	ldr	r3, [pc, #568]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a0:	d00c      	beq.n	80029bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029a2:	4b8b      	ldr	r3, [pc, #556]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029aa:	2b0c      	cmp	r3, #12
 80029ac:	d112      	bne.n	80029d4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ae:	4b88      	ldr	r3, [pc, #544]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ba:	d10b      	bne.n	80029d4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029bc:	4b84      	ldr	r3, [pc, #528]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d05b      	beq.n	8002a80 <HAL_RCC_OscConfig+0x124>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d157      	bne.n	8002a80 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e25a      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029dc:	d106      	bne.n	80029ec <HAL_RCC_OscConfig+0x90>
 80029de:	4b7c      	ldr	r3, [pc, #496]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a7b      	ldr	r2, [pc, #492]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 80029e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	e01d      	b.n	8002a28 <HAL_RCC_OscConfig+0xcc>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f4:	d10c      	bne.n	8002a10 <HAL_RCC_OscConfig+0xb4>
 80029f6:	4b76      	ldr	r3, [pc, #472]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a75      	ldr	r2, [pc, #468]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 80029fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	4b73      	ldr	r3, [pc, #460]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a72      	ldr	r2, [pc, #456]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	e00b      	b.n	8002a28 <HAL_RCC_OscConfig+0xcc>
 8002a10:	4b6f      	ldr	r3, [pc, #444]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a6e      	ldr	r2, [pc, #440]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	4b6c      	ldr	r3, [pc, #432]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a6b      	ldr	r2, [pc, #428]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d013      	beq.n	8002a58 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7ff f99c 	bl	8001d6c <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a38:	f7ff f998 	bl	8001d6c <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	; 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e21f      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4a:	4b61      	ldr	r3, [pc, #388]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCC_OscConfig+0xdc>
 8002a56:	e014      	b.n	8002a82 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7ff f988 	bl	8001d6c <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a60:	f7ff f984 	bl	8001d6c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b64      	cmp	r3, #100	; 0x64
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e20b      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a72:	4b57      	ldr	r3, [pc, #348]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x104>
 8002a7e:	e000      	b.n	8002a82 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d06f      	beq.n	8002b6e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a8e:	4b50      	ldr	r3, [pc, #320]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d017      	beq.n	8002aca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a9a:	4b4d      	ldr	r3, [pc, #308]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d105      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002aa6:	4b4a      	ldr	r3, [pc, #296]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00b      	beq.n	8002aca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ab2:	4b47      	ldr	r3, [pc, #284]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002aba:	2b0c      	cmp	r3, #12
 8002abc:	d11c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002abe:	4b44      	ldr	r3, [pc, #272]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d116      	bne.n	8002af8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aca:	4b41      	ldr	r3, [pc, #260]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d005      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x186>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d001      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e1d3      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae2:	4b3b      	ldr	r3, [pc, #236]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4937      	ldr	r1, [pc, #220]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af6:	e03a      	b.n	8002b6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d020      	beq.n	8002b42 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b00:	4b34      	ldr	r3, [pc, #208]	; (8002bd4 <HAL_RCC_OscConfig+0x278>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7ff f931 	bl	8001d6c <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b0e:	f7ff f92d 	bl	8001d6c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e1b4      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b20:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2c:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4925      	ldr	r1, [pc, #148]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	600b      	str	r3, [r1, #0]
 8002b40:	e015      	b.n	8002b6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b42:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <HAL_RCC_OscConfig+0x278>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7ff f910 	bl	8001d6c <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b50:	f7ff f90c 	bl	8001d6c <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e193      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b62:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d036      	beq.n	8002be8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d016      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b82:	4b15      	ldr	r3, [pc, #84]	; (8002bd8 <HAL_RCC_OscConfig+0x27c>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b88:	f7ff f8f0 	bl	8001d6c <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b90:	f7ff f8ec 	bl	8001d6c <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e173      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0x234>
 8002bae:	e01b      	b.n	8002be8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb0:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <HAL_RCC_OscConfig+0x27c>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb6:	f7ff f8d9 	bl	8001d6c <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bbc:	e00e      	b.n	8002bdc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bbe:	f7ff f8d5 	bl	8001d6c <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d907      	bls.n	8002bdc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e15c      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	42470000 	.word	0x42470000
 8002bd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bdc:	4b8a      	ldr	r3, [pc, #552]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1ea      	bne.n	8002bbe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 8097 	beq.w	8002d24 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bfa:	4b83      	ldr	r3, [pc, #524]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10f      	bne.n	8002c26 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	4b7f      	ldr	r3, [pc, #508]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	4a7e      	ldr	r2, [pc, #504]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c14:	6413      	str	r3, [r2, #64]	; 0x40
 8002c16:	4b7c      	ldr	r3, [pc, #496]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c22:	2301      	movs	r3, #1
 8002c24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c26:	4b79      	ldr	r3, [pc, #484]	; (8002e0c <HAL_RCC_OscConfig+0x4b0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d118      	bne.n	8002c64 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c32:	4b76      	ldr	r3, [pc, #472]	; (8002e0c <HAL_RCC_OscConfig+0x4b0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a75      	ldr	r2, [pc, #468]	; (8002e0c <HAL_RCC_OscConfig+0x4b0>)
 8002c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c3e:	f7ff f895 	bl	8001d6c <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c46:	f7ff f891 	bl	8001d6c <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e118      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c58:	4b6c      	ldr	r3, [pc, #432]	; (8002e0c <HAL_RCC_OscConfig+0x4b0>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0f0      	beq.n	8002c46 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d106      	bne.n	8002c7a <HAL_RCC_OscConfig+0x31e>
 8002c6c:	4b66      	ldr	r3, [pc, #408]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c70:	4a65      	ldr	r2, [pc, #404]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6713      	str	r3, [r2, #112]	; 0x70
 8002c78:	e01c      	b.n	8002cb4 <HAL_RCC_OscConfig+0x358>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b05      	cmp	r3, #5
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x340>
 8002c82:	4b61      	ldr	r3, [pc, #388]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	4a60      	ldr	r2, [pc, #384]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002c88:	f043 0304 	orr.w	r3, r3, #4
 8002c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8e:	4b5e      	ldr	r3, [pc, #376]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c92:	4a5d      	ldr	r2, [pc, #372]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCC_OscConfig+0x358>
 8002c9c:	4b5a      	ldr	r3, [pc, #360]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	4a59      	ldr	r2, [pc, #356]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002ca2:	f023 0301 	bic.w	r3, r3, #1
 8002ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca8:	4b57      	ldr	r3, [pc, #348]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	4a56      	ldr	r2, [pc, #344]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002cae:	f023 0304 	bic.w	r3, r3, #4
 8002cb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d015      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbc:	f7ff f856 	bl	8001d6c <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc4:	f7ff f852 	bl	8001d6c <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e0d7      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cda:	4b4b      	ldr	r3, [pc, #300]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0ee      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x368>
 8002ce6:	e014      	b.n	8002d12 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce8:	f7ff f840 	bl	8001d6c <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cee:	e00a      	b.n	8002d06 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf0:	f7ff f83c 	bl	8001d6c <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e0c1      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d06:	4b40      	ldr	r3, [pc, #256]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1ee      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d12:	7dfb      	ldrb	r3, [r7, #23]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d105      	bne.n	8002d24 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d18:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	4a3a      	ldr	r2, [pc, #232]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80ad 	beq.w	8002e88 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d2e:	4b36      	ldr	r3, [pc, #216]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d060      	beq.n	8002dfc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d145      	bne.n	8002dce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d42:	4b33      	ldr	r3, [pc, #204]	; (8002e10 <HAL_RCC_OscConfig+0x4b4>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7ff f810 	bl	8001d6c <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d50:	f7ff f80c 	bl	8001d6c <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e093      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d62:	4b29      	ldr	r3, [pc, #164]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69da      	ldr	r2, [r3, #28]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	019b      	lsls	r3, r3, #6
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d84:	085b      	lsrs	r3, r3, #1
 8002d86:	3b01      	subs	r3, #1
 8002d88:	041b      	lsls	r3, r3, #16
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	061b      	lsls	r3, r3, #24
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	071b      	lsls	r3, r3, #28
 8002d9a:	491b      	ldr	r1, [pc, #108]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da0:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_RCC_OscConfig+0x4b4>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da6:	f7fe ffe1 	bl	8001d6c <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dae:	f7fe ffdd 	bl	8001d6c <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e064      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc0:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x452>
 8002dcc:	e05c      	b.n	8002e88 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dce:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <HAL_RCC_OscConfig+0x4b4>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7fe ffca 	bl	8001d6c <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ddc:	f7fe ffc6 	bl	8001d6c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e04d      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dee:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_RCC_OscConfig+0x4ac>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x480>
 8002dfa:	e045      	b.n	8002e88 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e040      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40007000 	.word	0x40007000
 8002e10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e14:	4b1f      	ldr	r3, [pc, #124]	; (8002e94 <HAL_RCC_OscConfig+0x538>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d030      	beq.n	8002e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d129      	bne.n	8002e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d122      	bne.n	8002e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e44:	4013      	ands	r3, r2
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d119      	bne.n	8002e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5a:	085b      	lsrs	r3, r3, #1
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d10f      	bne.n	8002e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d107      	bne.n	8002e84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800

08002e98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e03f      	b.n	8002f2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fe fe2e 	bl	8001b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2224      	movs	r2, #36	; 0x24
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 fd15 	bl	800390c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695a      	ldr	r2, [r3, #20]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b085      	sub	sp, #20
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	d130      	bne.n	8002fae <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_UART_Transmit_IT+0x26>
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e029      	b.n	8002fb0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_UART_Transmit_IT+0x38>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e022      	b.n	8002fb0 <HAL_UART_Transmit_IT+0x7e>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	88fa      	ldrh	r2, [r7, #6]
 8002f7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	88fa      	ldrh	r2, [r7, #6]
 8002f82:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2221      	movs	r2, #33	; 0x21
 8002f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fa8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	e000      	b.n	8002fb0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002fae:	2302      	movs	r3, #2
  }
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b20      	cmp	r3, #32
 8002fd4:	d11d      	bne.n	8003012 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <HAL_UART_Receive_IT+0x26>
 8002fdc:	88fb      	ldrh	r3, [r7, #6]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e016      	b.n	8003014 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_UART_Receive_IT+0x38>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e00f      	b.n	8003014 <HAL_UART_Receive_IT+0x58>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	461a      	mov	r2, r3
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 faab 	bl	8003564 <UART_Start_Receive_IT>
 800300e:	4603      	mov	r3, r0
 8003010:	e000      	b.n	8003014 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003012:	2302      	movs	r3, #2
  }
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b0ba      	sub	sp, #232	; 0xe8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003042:	2300      	movs	r3, #0
 8003044:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003048:	2300      	movs	r3, #0
 800304a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800304e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800305a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10f      	bne.n	8003082 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <HAL_UART_IRQHandler+0x66>
 800306e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fb8b 	bl	8003796 <UART_Receive_IT>
      return;
 8003080:	e256      	b.n	8003530 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003082:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 80de 	beq.w	8003248 <HAL_UART_IRQHandler+0x22c>
 800308c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d106      	bne.n	80030a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800309c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80d1 	beq.w	8003248 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00b      	beq.n	80030ca <HAL_UART_IRQHandler+0xae>
 80030b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d005      	beq.n	80030ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f043 0201 	orr.w	r2, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00b      	beq.n	80030ee <HAL_UART_IRQHandler+0xd2>
 80030d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f043 0202 	orr.w	r2, r3, #2
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00b      	beq.n	8003112 <HAL_UART_IRQHandler+0xf6>
 80030fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f043 0204 	orr.w	r2, r3, #4
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d011      	beq.n	8003142 <HAL_UART_IRQHandler+0x126>
 800311e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	d105      	bne.n	8003136 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800312a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d005      	beq.n	8003142 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f043 0208 	orr.w	r2, r3, #8
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 81ed 	beq.w	8003526 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800314c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003150:	f003 0320 	and.w	r3, r3, #32
 8003154:	2b00      	cmp	r3, #0
 8003156:	d008      	beq.n	800316a <HAL_UART_IRQHandler+0x14e>
 8003158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 fb16 	bl	8003796 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003174:	2b40      	cmp	r3, #64	; 0x40
 8003176:	bf0c      	ite	eq
 8003178:	2301      	moveq	r3, #1
 800317a:	2300      	movne	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d103      	bne.n	8003196 <HAL_UART_IRQHandler+0x17a>
 800318e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d04f      	beq.n	8003236 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fa1e 	bl	80035d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a6:	2b40      	cmp	r3, #64	; 0x40
 80031a8:	d141      	bne.n	800322e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3314      	adds	r3, #20
 80031b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031b8:	e853 3f00 	ldrex	r3, [r3]
 80031bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3314      	adds	r3, #20
 80031d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80031e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031e6:	e841 2300 	strex	r3, r2, [r1]
 80031ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1d9      	bne.n	80031aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d013      	beq.n	8003226 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003202:	4a7d      	ldr	r2, [pc, #500]	; (80033f8 <HAL_UART_IRQHandler+0x3dc>)
 8003204:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe ff5f 	bl	80020ce <HAL_DMA_Abort_IT>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d016      	beq.n	8003244 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003220:	4610      	mov	r0, r2
 8003222:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003224:	e00e      	b.n	8003244 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f986 	bl	8003538 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800322c:	e00a      	b.n	8003244 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f982 	bl	8003538 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003234:	e006      	b.n	8003244 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f97e 	bl	8003538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003242:	e170      	b.n	8003526 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003244:	bf00      	nop
    return;
 8003246:	e16e      	b.n	8003526 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	2b01      	cmp	r3, #1
 800324e:	f040 814a 	bne.w	80034e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003256:	f003 0310 	and.w	r3, r3, #16
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 8143 	beq.w	80034e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 813c 	beq.w	80034e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800326e:	2300      	movs	r3, #0
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328e:	2b40      	cmp	r3, #64	; 0x40
 8003290:	f040 80b4 	bne.w	80033fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 8140 	beq.w	800352a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032b2:	429a      	cmp	r2, r3
 80032b4:	f080 8139 	bcs.w	800352a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ca:	f000 8088 	beq.w	80033de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	330c      	adds	r3, #12
 80032d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032dc:	e853 3f00 	ldrex	r3, [r3]
 80032e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	330c      	adds	r3, #12
 80032f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80032fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003302:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003306:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800330a:	e841 2300 	strex	r3, r2, [r1]
 800330e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1d9      	bne.n	80032ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	3314      	adds	r3, #20
 8003320:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003322:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003324:	e853 3f00 	ldrex	r3, [r3]
 8003328:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800332a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800332c:	f023 0301 	bic.w	r3, r3, #1
 8003330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3314      	adds	r3, #20
 800333a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800333e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003342:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003344:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003346:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800334a:	e841 2300 	strex	r3, r2, [r1]
 800334e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003350:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1e1      	bne.n	800331a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	3314      	adds	r3, #20
 800335c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003360:	e853 3f00 	ldrex	r3, [r3]
 8003364:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800336c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3314      	adds	r3, #20
 8003376:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800337a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800337c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003380:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003382:	e841 2300 	strex	r3, r2, [r1]
 8003386:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1e3      	bne.n	8003356 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	330c      	adds	r3, #12
 80033a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a6:	e853 3f00 	ldrex	r3, [r3]
 80033aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ae:	f023 0310 	bic.w	r3, r3, #16
 80033b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	330c      	adds	r3, #12
 80033bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80033c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80033c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033c8:	e841 2300 	strex	r3, r2, [r1]
 80033cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1e3      	bne.n	800339c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fe fe08 	bl	8001fee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	4619      	mov	r1, r3
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f8ac 	bl	800354c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033f4:	e099      	b.n	800352a <HAL_UART_IRQHandler+0x50e>
 80033f6:	bf00      	nop
 80033f8:	0800369f 	.word	0x0800369f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003404:	b29b      	uxth	r3, r3
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 808b 	beq.w	800352e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003418:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 8086 	beq.w	800352e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	330c      	adds	r3, #12
 8003428:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342c:	e853 3f00 	ldrex	r3, [r3]
 8003430:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003434:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003438:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	330c      	adds	r3, #12
 8003442:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003446:	647a      	str	r2, [r7, #68]	; 0x44
 8003448:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800344c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800344e:	e841 2300 	strex	r3, r2, [r1]
 8003452:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1e3      	bne.n	8003422 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3314      	adds	r3, #20
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	e853 3f00 	ldrex	r3, [r3]
 8003468:	623b      	str	r3, [r7, #32]
   return(result);
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	f023 0301 	bic.w	r3, r3, #1
 8003470:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3314      	adds	r3, #20
 800347a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800347e:	633a      	str	r2, [r7, #48]	; 0x30
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003486:	e841 2300 	strex	r3, r2, [r1]
 800348a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800348c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1e3      	bne.n	800345a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	330c      	adds	r3, #12
 80034a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	e853 3f00 	ldrex	r3, [r3]
 80034ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0310 	bic.w	r3, r3, #16
 80034b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	330c      	adds	r3, #12
 80034c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80034c4:	61fa      	str	r2, [r7, #28]
 80034c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c8:	69b9      	ldr	r1, [r7, #24]
 80034ca:	69fa      	ldr	r2, [r7, #28]
 80034cc:	e841 2300 	strex	r3, r2, [r1]
 80034d0:	617b      	str	r3, [r7, #20]
   return(result);
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1e3      	bne.n	80034a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034dc:	4619      	mov	r1, r3
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f834 	bl	800354c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034e4:	e023      	b.n	800352e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d009      	beq.n	8003506 <HAL_UART_IRQHandler+0x4ea>
 80034f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f8e1 	bl	80036c6 <UART_Transmit_IT>
    return;
 8003504:	e014      	b.n	8003530 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800350a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00e      	beq.n	8003530 <HAL_UART_IRQHandler+0x514>
 8003512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d008      	beq.n	8003530 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f921 	bl	8003766 <UART_EndTransmit_IT>
    return;
 8003524:	e004      	b.n	8003530 <HAL_UART_IRQHandler+0x514>
    return;
 8003526:	bf00      	nop
 8003528:	e002      	b.n	8003530 <HAL_UART_IRQHandler+0x514>
      return;
 800352a:	bf00      	nop
 800352c:	e000      	b.n	8003530 <HAL_UART_IRQHandler+0x514>
      return;
 800352e:	bf00      	nop
  }
}
 8003530:	37e8      	adds	r7, #232	; 0xe8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop

08003538 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	4613      	mov	r3, r2
 8003570:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	88fa      	ldrh	r2, [r7, #6]
 800357c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	88fa      	ldrh	r2, [r7, #6]
 8003582:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2222      	movs	r2, #34	; 0x22
 800358e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035a8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695a      	ldr	r2, [r3, #20]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0201 	orr.w	r2, r2, #1
 80035b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0220 	orr.w	r2, r2, #32
 80035c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035d8:	b480      	push	{r7}
 80035da:	b095      	sub	sp, #84	; 0x54
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	330c      	adds	r3, #12
 80035e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ea:	e853 3f00 	ldrex	r3, [r3]
 80035ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	330c      	adds	r3, #12
 80035fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003600:	643a      	str	r2, [r7, #64]	; 0x40
 8003602:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003604:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003608:	e841 2300 	strex	r3, r2, [r1]
 800360c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800360e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1e5      	bne.n	80035e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3314      	adds	r3, #20
 800361a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	e853 3f00 	ldrex	r3, [r3]
 8003622:	61fb      	str	r3, [r7, #28]
   return(result);
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f023 0301 	bic.w	r3, r3, #1
 800362a:	64bb      	str	r3, [r7, #72]	; 0x48
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3314      	adds	r3, #20
 8003632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003634:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003636:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800363a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800363c:	e841 2300 	strex	r3, r2, [r1]
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1e5      	bne.n	8003614 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	2b01      	cmp	r3, #1
 800364e:	d119      	bne.n	8003684 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	330c      	adds	r3, #12
 8003656:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	e853 3f00 	ldrex	r3, [r3]
 800365e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f023 0310 	bic.w	r3, r3, #16
 8003666:	647b      	str	r3, [r7, #68]	; 0x44
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	330c      	adds	r3, #12
 800366e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003670:	61ba      	str	r2, [r7, #24]
 8003672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003674:	6979      	ldr	r1, [r7, #20]
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	e841 2300 	strex	r3, r2, [r1]
 800367c:	613b      	str	r3, [r7, #16]
   return(result);
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e5      	bne.n	8003650 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003692:	bf00      	nop
 8003694:	3754      	adds	r7, #84	; 0x54
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f7ff ff3d 	bl	8003538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b085      	sub	sp, #20
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b21      	cmp	r3, #33	; 0x21
 80036d8:	d13e      	bne.n	8003758 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e2:	d114      	bne.n	800370e <UART_Transmit_IT+0x48>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d110      	bne.n	800370e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003700:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	1c9a      	adds	r2, r3, #2
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	621a      	str	r2, [r3, #32]
 800370c:	e008      	b.n	8003720 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	1c59      	adds	r1, r3, #1
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6211      	str	r1, [r2, #32]
 8003718:	781a      	ldrb	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	b29b      	uxth	r3, r3
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	4619      	mov	r1, r3
 800372e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10f      	bne.n	8003754 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003742:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003752:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	e000      	b.n	800375a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003758:	2302      	movs	r3, #2
  }
}
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800377c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fe f980 	bl	8001a8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b08c      	sub	sp, #48	; 0x30
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b22      	cmp	r3, #34	; 0x22
 80037a8:	f040 80ab 	bne.w	8003902 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b4:	d117      	bne.n	80037e6 <UART_Receive_IT+0x50>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d113      	bne.n	80037e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037de:	1c9a      	adds	r2, r3, #2
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	629a      	str	r2, [r3, #40]	; 0x28
 80037e4:	e026      	b.n	8003834 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80037ec:	2300      	movs	r3, #0
 80037ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f8:	d007      	beq.n	800380a <UART_Receive_IT+0x74>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10a      	bne.n	8003818 <UART_Receive_IT+0x82>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	b2da      	uxtb	r2, r3
 8003812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003814:	701a      	strb	r2, [r3, #0]
 8003816:	e008      	b.n	800382a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003824:	b2da      	uxtb	r2, r3
 8003826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003828:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29b      	uxth	r3, r3
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	4619      	mov	r1, r3
 8003842:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003844:	2b00      	cmp	r3, #0
 8003846:	d15a      	bne.n	80038fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0220 	bic.w	r2, r2, #32
 8003856:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003866:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0201 	bic.w	r2, r2, #1
 8003876:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	2b01      	cmp	r3, #1
 8003886:	d135      	bne.n	80038f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	330c      	adds	r3, #12
 8003894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	e853 3f00 	ldrex	r3, [r3]
 800389c:	613b      	str	r3, [r7, #16]
   return(result);
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f023 0310 	bic.w	r3, r3, #16
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	330c      	adds	r3, #12
 80038ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ae:	623a      	str	r2, [r7, #32]
 80038b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b2:	69f9      	ldr	r1, [r7, #28]
 80038b4:	6a3a      	ldr	r2, [r7, #32]
 80038b6:	e841 2300 	strex	r3, r2, [r1]
 80038ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1e5      	bne.n	800388e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b10      	cmp	r3, #16
 80038ce:	d10a      	bne.n	80038e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038d0:	2300      	movs	r3, #0
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038ea:	4619      	mov	r1, r3
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff fe2d 	bl	800354c <HAL_UARTEx_RxEventCallback>
 80038f2:	e002      	b.n	80038fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7fe f87f 	bl	80019f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	e002      	b.n	8003904 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	e000      	b.n	8003904 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003902:	2302      	movs	r3, #2
  }
}
 8003904:	4618      	mov	r0, r3
 8003906:	3730      	adds	r7, #48	; 0x30
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800390c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003910:	b09f      	sub	sp, #124	; 0x7c
 8003912:	af00      	add	r7, sp, #0
 8003914:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003922:	68d9      	ldr	r1, [r3, #12]
 8003924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	ea40 0301 	orr.w	r3, r0, r1
 800392c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800392e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	431a      	orrs	r2, r3
 8003938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	431a      	orrs	r2, r3
 800393e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	4313      	orrs	r3, r2
 8003944:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003950:	f021 010c 	bic.w	r1, r1, #12
 8003954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800395a:	430b      	orrs	r3, r1
 800395c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800395e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800396a:	6999      	ldr	r1, [r3, #24]
 800396c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	ea40 0301 	orr.w	r3, r0, r1
 8003974:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4bc5      	ldr	r3, [pc, #788]	; (8003c90 <UART_SetConfig+0x384>)
 800397c:	429a      	cmp	r2, r3
 800397e:	d004      	beq.n	800398a <UART_SetConfig+0x7e>
 8003980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4bc3      	ldr	r3, [pc, #780]	; (8003c94 <UART_SetConfig+0x388>)
 8003986:	429a      	cmp	r2, r3
 8003988:	d103      	bne.n	8003992 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800398a:	f7fe fe77 	bl	800267c <HAL_RCC_GetPCLK2Freq>
 800398e:	6778      	str	r0, [r7, #116]	; 0x74
 8003990:	e002      	b.n	8003998 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003992:	f7fe fe5f 	bl	8002654 <HAL_RCC_GetPCLK1Freq>
 8003996:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a0:	f040 80b6 	bne.w	8003b10 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039a6:	461c      	mov	r4, r3
 80039a8:	f04f 0500 	mov.w	r5, #0
 80039ac:	4622      	mov	r2, r4
 80039ae:	462b      	mov	r3, r5
 80039b0:	1891      	adds	r1, r2, r2
 80039b2:	6439      	str	r1, [r7, #64]	; 0x40
 80039b4:	415b      	adcs	r3, r3
 80039b6:	647b      	str	r3, [r7, #68]	; 0x44
 80039b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039bc:	1912      	adds	r2, r2, r4
 80039be:	eb45 0303 	adc.w	r3, r5, r3
 80039c2:	f04f 0000 	mov.w	r0, #0
 80039c6:	f04f 0100 	mov.w	r1, #0
 80039ca:	00d9      	lsls	r1, r3, #3
 80039cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039d0:	00d0      	lsls	r0, r2, #3
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	1911      	adds	r1, r2, r4
 80039d8:	6639      	str	r1, [r7, #96]	; 0x60
 80039da:	416b      	adcs	r3, r5
 80039dc:	667b      	str	r3, [r7, #100]	; 0x64
 80039de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	461a      	mov	r2, r3
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	1891      	adds	r1, r2, r2
 80039ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80039ec:	415b      	adcs	r3, r3
 80039ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80039f8:	f7fc ffec 	bl	80009d4 <__aeabi_uldivmod>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4ba5      	ldr	r3, [pc, #660]	; (8003c98 <UART_SetConfig+0x38c>)
 8003a02:	fba3 2302 	umull	r2, r3, r3, r2
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	011e      	lsls	r6, r3, #4
 8003a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a0c:	461c      	mov	r4, r3
 8003a0e:	f04f 0500 	mov.w	r5, #0
 8003a12:	4622      	mov	r2, r4
 8003a14:	462b      	mov	r3, r5
 8003a16:	1891      	adds	r1, r2, r2
 8003a18:	6339      	str	r1, [r7, #48]	; 0x30
 8003a1a:	415b      	adcs	r3, r3
 8003a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003a22:	1912      	adds	r2, r2, r4
 8003a24:	eb45 0303 	adc.w	r3, r5, r3
 8003a28:	f04f 0000 	mov.w	r0, #0
 8003a2c:	f04f 0100 	mov.w	r1, #0
 8003a30:	00d9      	lsls	r1, r3, #3
 8003a32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a36:	00d0      	lsls	r0, r2, #3
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	1911      	adds	r1, r2, r4
 8003a3e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a40:	416b      	adcs	r3, r5
 8003a42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f04f 0300 	mov.w	r3, #0
 8003a4e:	1891      	adds	r1, r2, r2
 8003a50:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a52:	415b      	adcs	r3, r3
 8003a54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003a5e:	f7fc ffb9 	bl	80009d4 <__aeabi_uldivmod>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4b8c      	ldr	r3, [pc, #560]	; (8003c98 <UART_SetConfig+0x38c>)
 8003a68:	fba3 1302 	umull	r1, r3, r3, r2
 8003a6c:	095b      	lsrs	r3, r3, #5
 8003a6e:	2164      	movs	r1, #100	; 0x64
 8003a70:	fb01 f303 	mul.w	r3, r1, r3
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	3332      	adds	r3, #50	; 0x32
 8003a7a:	4a87      	ldr	r2, [pc, #540]	; (8003c98 <UART_SetConfig+0x38c>)
 8003a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a80:	095b      	lsrs	r3, r3, #5
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a88:	441e      	add	r6, r3
 8003a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f04f 0100 	mov.w	r1, #0
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	1894      	adds	r4, r2, r2
 8003a98:	623c      	str	r4, [r7, #32]
 8003a9a:	415b      	adcs	r3, r3
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003aa2:	1812      	adds	r2, r2, r0
 8003aa4:	eb41 0303 	adc.w	r3, r1, r3
 8003aa8:	f04f 0400 	mov.w	r4, #0
 8003aac:	f04f 0500 	mov.w	r5, #0
 8003ab0:	00dd      	lsls	r5, r3, #3
 8003ab2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ab6:	00d4      	lsls	r4, r2, #3
 8003ab8:	4622      	mov	r2, r4
 8003aba:	462b      	mov	r3, r5
 8003abc:	1814      	adds	r4, r2, r0
 8003abe:	653c      	str	r4, [r7, #80]	; 0x50
 8003ac0:	414b      	adcs	r3, r1
 8003ac2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f04f 0300 	mov.w	r3, #0
 8003ace:	1891      	adds	r1, r2, r2
 8003ad0:	61b9      	str	r1, [r7, #24]
 8003ad2:	415b      	adcs	r3, r3
 8003ad4:	61fb      	str	r3, [r7, #28]
 8003ad6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ada:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003ade:	f7fc ff79 	bl	80009d4 <__aeabi_uldivmod>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4b6c      	ldr	r3, [pc, #432]	; (8003c98 <UART_SetConfig+0x38c>)
 8003ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	2164      	movs	r1, #100	; 0x64
 8003af0:	fb01 f303 	mul.w	r3, r1, r3
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	3332      	adds	r3, #50	; 0x32
 8003afa:	4a67      	ldr	r2, [pc, #412]	; (8003c98 <UART_SetConfig+0x38c>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	095b      	lsrs	r3, r3, #5
 8003b02:	f003 0207 	and.w	r2, r3, #7
 8003b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4432      	add	r2, r6
 8003b0c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b0e:	e0b9      	b.n	8003c84 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b12:	461c      	mov	r4, r3
 8003b14:	f04f 0500 	mov.w	r5, #0
 8003b18:	4622      	mov	r2, r4
 8003b1a:	462b      	mov	r3, r5
 8003b1c:	1891      	adds	r1, r2, r2
 8003b1e:	6139      	str	r1, [r7, #16]
 8003b20:	415b      	adcs	r3, r3
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b28:	1912      	adds	r2, r2, r4
 8003b2a:	eb45 0303 	adc.w	r3, r5, r3
 8003b2e:	f04f 0000 	mov.w	r0, #0
 8003b32:	f04f 0100 	mov.w	r1, #0
 8003b36:	00d9      	lsls	r1, r3, #3
 8003b38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b3c:	00d0      	lsls	r0, r2, #3
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	eb12 0804 	adds.w	r8, r2, r4
 8003b46:	eb43 0905 	adc.w	r9, r3, r5
 8003b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f04f 0100 	mov.w	r1, #0
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	008b      	lsls	r3, r1, #2
 8003b5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b62:	0082      	lsls	r2, r0, #2
 8003b64:	4640      	mov	r0, r8
 8003b66:	4649      	mov	r1, r9
 8003b68:	f7fc ff34 	bl	80009d4 <__aeabi_uldivmod>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4b49      	ldr	r3, [pc, #292]	; (8003c98 <UART_SetConfig+0x38c>)
 8003b72:	fba3 2302 	umull	r2, r3, r3, r2
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	011e      	lsls	r6, r3, #4
 8003b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f04f 0100 	mov.w	r1, #0
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	1894      	adds	r4, r2, r2
 8003b88:	60bc      	str	r4, [r7, #8]
 8003b8a:	415b      	adcs	r3, r3
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b92:	1812      	adds	r2, r2, r0
 8003b94:	eb41 0303 	adc.w	r3, r1, r3
 8003b98:	f04f 0400 	mov.w	r4, #0
 8003b9c:	f04f 0500 	mov.w	r5, #0
 8003ba0:	00dd      	lsls	r5, r3, #3
 8003ba2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ba6:	00d4      	lsls	r4, r2, #3
 8003ba8:	4622      	mov	r2, r4
 8003baa:	462b      	mov	r3, r5
 8003bac:	1814      	adds	r4, r2, r0
 8003bae:	64bc      	str	r4, [r7, #72]	; 0x48
 8003bb0:	414b      	adcs	r3, r1
 8003bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f04f 0100 	mov.w	r1, #0
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	008b      	lsls	r3, r1, #2
 8003bc8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bcc:	0082      	lsls	r2, r0, #2
 8003bce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003bd2:	f7fc feff 	bl	80009d4 <__aeabi_uldivmod>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4b2f      	ldr	r3, [pc, #188]	; (8003c98 <UART_SetConfig+0x38c>)
 8003bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	2164      	movs	r1, #100	; 0x64
 8003be4:	fb01 f303 	mul.w	r3, r1, r3
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	3332      	adds	r3, #50	; 0x32
 8003bee:	4a2a      	ldr	r2, [pc, #168]	; (8003c98 <UART_SetConfig+0x38c>)
 8003bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf4:	095b      	lsrs	r3, r3, #5
 8003bf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bfa:	441e      	add	r6, r3
 8003bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f04f 0100 	mov.w	r1, #0
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	1894      	adds	r4, r2, r2
 8003c0a:	603c      	str	r4, [r7, #0]
 8003c0c:	415b      	adcs	r3, r3
 8003c0e:	607b      	str	r3, [r7, #4]
 8003c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c14:	1812      	adds	r2, r2, r0
 8003c16:	eb41 0303 	adc.w	r3, r1, r3
 8003c1a:	f04f 0400 	mov.w	r4, #0
 8003c1e:	f04f 0500 	mov.w	r5, #0
 8003c22:	00dd      	lsls	r5, r3, #3
 8003c24:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c28:	00d4      	lsls	r4, r2, #3
 8003c2a:	4622      	mov	r2, r4
 8003c2c:	462b      	mov	r3, r5
 8003c2e:	eb12 0a00 	adds.w	sl, r2, r0
 8003c32:	eb43 0b01 	adc.w	fp, r3, r1
 8003c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f04f 0100 	mov.w	r1, #0
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	008b      	lsls	r3, r1, #2
 8003c4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c4e:	0082      	lsls	r2, r0, #2
 8003c50:	4650      	mov	r0, sl
 8003c52:	4659      	mov	r1, fp
 8003c54:	f7fc febe 	bl	80009d4 <__aeabi_uldivmod>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <UART_SetConfig+0x38c>)
 8003c5e:	fba3 1302 	umull	r1, r3, r3, r2
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	2164      	movs	r1, #100	; 0x64
 8003c66:	fb01 f303 	mul.w	r3, r1, r3
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	3332      	adds	r3, #50	; 0x32
 8003c70:	4a09      	ldr	r2, [pc, #36]	; (8003c98 <UART_SetConfig+0x38c>)
 8003c72:	fba2 2303 	umull	r2, r3, r2, r3
 8003c76:	095b      	lsrs	r3, r3, #5
 8003c78:	f003 020f 	and.w	r2, r3, #15
 8003c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4432      	add	r2, r6
 8003c82:	609a      	str	r2, [r3, #8]
}
 8003c84:	bf00      	nop
 8003c86:	377c      	adds	r7, #124	; 0x7c
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c8e:	bf00      	nop
 8003c90:	40011000 	.word	0x40011000
 8003c94:	40011400 	.word	0x40011400
 8003c98:	51eb851f 	.word	0x51eb851f

08003c9c <__libc_init_array>:
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	4d0d      	ldr	r5, [pc, #52]	; (8003cd4 <__libc_init_array+0x38>)
 8003ca0:	4c0d      	ldr	r4, [pc, #52]	; (8003cd8 <__libc_init_array+0x3c>)
 8003ca2:	1b64      	subs	r4, r4, r5
 8003ca4:	10a4      	asrs	r4, r4, #2
 8003ca6:	2600      	movs	r6, #0
 8003ca8:	42a6      	cmp	r6, r4
 8003caa:	d109      	bne.n	8003cc0 <__libc_init_array+0x24>
 8003cac:	4d0b      	ldr	r5, [pc, #44]	; (8003cdc <__libc_init_array+0x40>)
 8003cae:	4c0c      	ldr	r4, [pc, #48]	; (8003ce0 <__libc_init_array+0x44>)
 8003cb0:	f001 f89c 	bl	8004dec <_init>
 8003cb4:	1b64      	subs	r4, r4, r5
 8003cb6:	10a4      	asrs	r4, r4, #2
 8003cb8:	2600      	movs	r6, #0
 8003cba:	42a6      	cmp	r6, r4
 8003cbc:	d105      	bne.n	8003cca <__libc_init_array+0x2e>
 8003cbe:	bd70      	pop	{r4, r5, r6, pc}
 8003cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc4:	4798      	blx	r3
 8003cc6:	3601      	adds	r6, #1
 8003cc8:	e7ee      	b.n	8003ca8 <__libc_init_array+0xc>
 8003cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cce:	4798      	blx	r3
 8003cd0:	3601      	adds	r6, #1
 8003cd2:	e7f2      	b.n	8003cba <__libc_init_array+0x1e>
 8003cd4:	08005000 	.word	0x08005000
 8003cd8:	08005000 	.word	0x08005000
 8003cdc:	08005000 	.word	0x08005000
 8003ce0:	08005004 	.word	0x08005004

08003ce4 <memset>:
 8003ce4:	4402      	add	r2, r0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d100      	bne.n	8003cee <memset+0xa>
 8003cec:	4770      	bx	lr
 8003cee:	f803 1b01 	strb.w	r1, [r3], #1
 8003cf2:	e7f9      	b.n	8003ce8 <memset+0x4>

08003cf4 <round>:
 8003cf4:	ec51 0b10 	vmov	r0, r1, d0
 8003cf8:	b570      	push	{r4, r5, r6, lr}
 8003cfa:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8003cfe:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8003d02:	2c13      	cmp	r4, #19
 8003d04:	ee10 2a10 	vmov	r2, s0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	dc19      	bgt.n	8003d40 <round+0x4c>
 8003d0c:	2c00      	cmp	r4, #0
 8003d0e:	da09      	bge.n	8003d24 <round+0x30>
 8003d10:	3401      	adds	r4, #1
 8003d12:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8003d16:	d103      	bne.n	8003d20 <round+0x2c>
 8003d18:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003d1c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003d20:	2100      	movs	r1, #0
 8003d22:	e028      	b.n	8003d76 <round+0x82>
 8003d24:	4d15      	ldr	r5, [pc, #84]	; (8003d7c <round+0x88>)
 8003d26:	4125      	asrs	r5, r4
 8003d28:	ea01 0605 	and.w	r6, r1, r5
 8003d2c:	4332      	orrs	r2, r6
 8003d2e:	d00e      	beq.n	8003d4e <round+0x5a>
 8003d30:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d34:	fa42 f404 	asr.w	r4, r2, r4
 8003d38:	4423      	add	r3, r4
 8003d3a:	ea23 0305 	bic.w	r3, r3, r5
 8003d3e:	e7ef      	b.n	8003d20 <round+0x2c>
 8003d40:	2c33      	cmp	r4, #51	; 0x33
 8003d42:	dd07      	ble.n	8003d54 <round+0x60>
 8003d44:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8003d48:	d101      	bne.n	8003d4e <round+0x5a>
 8003d4a:	f7fc fb8d 	bl	8000468 <__adddf3>
 8003d4e:	ec41 0b10 	vmov	d0, r0, r1
 8003d52:	bd70      	pop	{r4, r5, r6, pc}
 8003d54:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8003d58:	f04f 35ff 	mov.w	r5, #4294967295
 8003d5c:	40f5      	lsrs	r5, r6
 8003d5e:	4228      	tst	r0, r5
 8003d60:	d0f5      	beq.n	8003d4e <round+0x5a>
 8003d62:	2101      	movs	r1, #1
 8003d64:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8003d68:	fa01 f404 	lsl.w	r4, r1, r4
 8003d6c:	1912      	adds	r2, r2, r4
 8003d6e:	bf28      	it	cs
 8003d70:	185b      	addcs	r3, r3, r1
 8003d72:	ea22 0105 	bic.w	r1, r2, r5
 8003d76:	4608      	mov	r0, r1
 8003d78:	4619      	mov	r1, r3
 8003d7a:	e7e8      	b.n	8003d4e <round+0x5a>
 8003d7c:	000fffff 	.word	0x000fffff

08003d80 <sin>:
 8003d80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003d82:	ec53 2b10 	vmov	r2, r3, d0
 8003d86:	4826      	ldr	r0, [pc, #152]	; (8003e20 <sin+0xa0>)
 8003d88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003d8c:	4281      	cmp	r1, r0
 8003d8e:	dc07      	bgt.n	8003da0 <sin+0x20>
 8003d90:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8003e18 <sin+0x98>
 8003d94:	2000      	movs	r0, #0
 8003d96:	f000 fe5b 	bl	8004a50 <__kernel_sin>
 8003d9a:	ec51 0b10 	vmov	r0, r1, d0
 8003d9e:	e007      	b.n	8003db0 <sin+0x30>
 8003da0:	4820      	ldr	r0, [pc, #128]	; (8003e24 <sin+0xa4>)
 8003da2:	4281      	cmp	r1, r0
 8003da4:	dd09      	ble.n	8003dba <sin+0x3a>
 8003da6:	ee10 0a10 	vmov	r0, s0
 8003daa:	4619      	mov	r1, r3
 8003dac:	f7fc fb5a 	bl	8000464 <__aeabi_dsub>
 8003db0:	ec41 0b10 	vmov	d0, r0, r1
 8003db4:	b005      	add	sp, #20
 8003db6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dba:	4668      	mov	r0, sp
 8003dbc:	f000 f834 	bl	8003e28 <__ieee754_rem_pio2>
 8003dc0:	f000 0003 	and.w	r0, r0, #3
 8003dc4:	2801      	cmp	r0, #1
 8003dc6:	d008      	beq.n	8003dda <sin+0x5a>
 8003dc8:	2802      	cmp	r0, #2
 8003dca:	d00d      	beq.n	8003de8 <sin+0x68>
 8003dcc:	b9d0      	cbnz	r0, 8003e04 <sin+0x84>
 8003dce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003dd2:	ed9d 0b00 	vldr	d0, [sp]
 8003dd6:	2001      	movs	r0, #1
 8003dd8:	e7dd      	b.n	8003d96 <sin+0x16>
 8003dda:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003dde:	ed9d 0b00 	vldr	d0, [sp]
 8003de2:	f000 fa2d 	bl	8004240 <__kernel_cos>
 8003de6:	e7d8      	b.n	8003d9a <sin+0x1a>
 8003de8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003dec:	ed9d 0b00 	vldr	d0, [sp]
 8003df0:	2001      	movs	r0, #1
 8003df2:	f000 fe2d 	bl	8004a50 <__kernel_sin>
 8003df6:	ec53 2b10 	vmov	r2, r3, d0
 8003dfa:	ee10 0a10 	vmov	r0, s0
 8003dfe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003e02:	e7d5      	b.n	8003db0 <sin+0x30>
 8003e04:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003e08:	ed9d 0b00 	vldr	d0, [sp]
 8003e0c:	f000 fa18 	bl	8004240 <__kernel_cos>
 8003e10:	e7f1      	b.n	8003df6 <sin+0x76>
 8003e12:	bf00      	nop
 8003e14:	f3af 8000 	nop.w
	...
 8003e20:	3fe921fb 	.word	0x3fe921fb
 8003e24:	7fefffff 	.word	0x7fefffff

08003e28 <__ieee754_rem_pio2>:
 8003e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e2c:	ed2d 8b02 	vpush	{d8}
 8003e30:	ec55 4b10 	vmov	r4, r5, d0
 8003e34:	4bca      	ldr	r3, [pc, #808]	; (8004160 <__ieee754_rem_pio2+0x338>)
 8003e36:	b08b      	sub	sp, #44	; 0x2c
 8003e38:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8003e3c:	4598      	cmp	r8, r3
 8003e3e:	4682      	mov	sl, r0
 8003e40:	9502      	str	r5, [sp, #8]
 8003e42:	dc08      	bgt.n	8003e56 <__ieee754_rem_pio2+0x2e>
 8003e44:	2200      	movs	r2, #0
 8003e46:	2300      	movs	r3, #0
 8003e48:	ed80 0b00 	vstr	d0, [r0]
 8003e4c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003e50:	f04f 0b00 	mov.w	fp, #0
 8003e54:	e028      	b.n	8003ea8 <__ieee754_rem_pio2+0x80>
 8003e56:	4bc3      	ldr	r3, [pc, #780]	; (8004164 <__ieee754_rem_pio2+0x33c>)
 8003e58:	4598      	cmp	r8, r3
 8003e5a:	dc78      	bgt.n	8003f4e <__ieee754_rem_pio2+0x126>
 8003e5c:	9b02      	ldr	r3, [sp, #8]
 8003e5e:	4ec2      	ldr	r6, [pc, #776]	; (8004168 <__ieee754_rem_pio2+0x340>)
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	ee10 0a10 	vmov	r0, s0
 8003e66:	a3b0      	add	r3, pc, #704	; (adr r3, 8004128 <__ieee754_rem_pio2+0x300>)
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	4629      	mov	r1, r5
 8003e6e:	dd39      	ble.n	8003ee4 <__ieee754_rem_pio2+0xbc>
 8003e70:	f7fc faf8 	bl	8000464 <__aeabi_dsub>
 8003e74:	45b0      	cmp	r8, r6
 8003e76:	4604      	mov	r4, r0
 8003e78:	460d      	mov	r5, r1
 8003e7a:	d01b      	beq.n	8003eb4 <__ieee754_rem_pio2+0x8c>
 8003e7c:	a3ac      	add	r3, pc, #688	; (adr r3, 8004130 <__ieee754_rem_pio2+0x308>)
 8003e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e82:	f7fc faef 	bl	8000464 <__aeabi_dsub>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	e9ca 2300 	strd	r2, r3, [sl]
 8003e8e:	4620      	mov	r0, r4
 8003e90:	4629      	mov	r1, r5
 8003e92:	f7fc fae7 	bl	8000464 <__aeabi_dsub>
 8003e96:	a3a6      	add	r3, pc, #664	; (adr r3, 8004130 <__ieee754_rem_pio2+0x308>)
 8003e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9c:	f7fc fae2 	bl	8000464 <__aeabi_dsub>
 8003ea0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003ea4:	f04f 0b01 	mov.w	fp, #1
 8003ea8:	4658      	mov	r0, fp
 8003eaa:	b00b      	add	sp, #44	; 0x2c
 8003eac:	ecbd 8b02 	vpop	{d8}
 8003eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eb4:	a3a0      	add	r3, pc, #640	; (adr r3, 8004138 <__ieee754_rem_pio2+0x310>)
 8003eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eba:	f7fc fad3 	bl	8000464 <__aeabi_dsub>
 8003ebe:	a3a0      	add	r3, pc, #640	; (adr r3, 8004140 <__ieee754_rem_pio2+0x318>)
 8003ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec4:	4604      	mov	r4, r0
 8003ec6:	460d      	mov	r5, r1
 8003ec8:	f7fc facc 	bl	8000464 <__aeabi_dsub>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	e9ca 2300 	strd	r2, r3, [sl]
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	f7fc fac4 	bl	8000464 <__aeabi_dsub>
 8003edc:	a398      	add	r3, pc, #608	; (adr r3, 8004140 <__ieee754_rem_pio2+0x318>)
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	e7db      	b.n	8003e9c <__ieee754_rem_pio2+0x74>
 8003ee4:	f7fc fac0 	bl	8000468 <__adddf3>
 8003ee8:	45b0      	cmp	r8, r6
 8003eea:	4604      	mov	r4, r0
 8003eec:	460d      	mov	r5, r1
 8003eee:	d016      	beq.n	8003f1e <__ieee754_rem_pio2+0xf6>
 8003ef0:	a38f      	add	r3, pc, #572	; (adr r3, 8004130 <__ieee754_rem_pio2+0x308>)
 8003ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef6:	f7fc fab7 	bl	8000468 <__adddf3>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	e9ca 2300 	strd	r2, r3, [sl]
 8003f02:	4620      	mov	r0, r4
 8003f04:	4629      	mov	r1, r5
 8003f06:	f7fc faad 	bl	8000464 <__aeabi_dsub>
 8003f0a:	a389      	add	r3, pc, #548	; (adr r3, 8004130 <__ieee754_rem_pio2+0x308>)
 8003f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f10:	f7fc faaa 	bl	8000468 <__adddf3>
 8003f14:	f04f 3bff 	mov.w	fp, #4294967295
 8003f18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003f1c:	e7c4      	b.n	8003ea8 <__ieee754_rem_pio2+0x80>
 8003f1e:	a386      	add	r3, pc, #536	; (adr r3, 8004138 <__ieee754_rem_pio2+0x310>)
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f7fc faa0 	bl	8000468 <__adddf3>
 8003f28:	a385      	add	r3, pc, #532	; (adr r3, 8004140 <__ieee754_rem_pio2+0x318>)
 8003f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2e:	4604      	mov	r4, r0
 8003f30:	460d      	mov	r5, r1
 8003f32:	f7fc fa99 	bl	8000468 <__adddf3>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	e9ca 2300 	strd	r2, r3, [sl]
 8003f3e:	4620      	mov	r0, r4
 8003f40:	4629      	mov	r1, r5
 8003f42:	f7fc fa8f 	bl	8000464 <__aeabi_dsub>
 8003f46:	a37e      	add	r3, pc, #504	; (adr r3, 8004140 <__ieee754_rem_pio2+0x318>)
 8003f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4c:	e7e0      	b.n	8003f10 <__ieee754_rem_pio2+0xe8>
 8003f4e:	4b87      	ldr	r3, [pc, #540]	; (800416c <__ieee754_rem_pio2+0x344>)
 8003f50:	4598      	cmp	r8, r3
 8003f52:	f300 80d9 	bgt.w	8004108 <__ieee754_rem_pio2+0x2e0>
 8003f56:	f000 fe39 	bl	8004bcc <fabs>
 8003f5a:	ec55 4b10 	vmov	r4, r5, d0
 8003f5e:	ee10 0a10 	vmov	r0, s0
 8003f62:	a379      	add	r3, pc, #484	; (adr r3, 8004148 <__ieee754_rem_pio2+0x320>)
 8003f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f68:	4629      	mov	r1, r5
 8003f6a:	f7fc f94d 	bl	8000208 <__aeabi_dmul>
 8003f6e:	4b80      	ldr	r3, [pc, #512]	; (8004170 <__ieee754_rem_pio2+0x348>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	f7fc fa79 	bl	8000468 <__adddf3>
 8003f76:	f7fc fcb5 	bl	80008e4 <__aeabi_d2iz>
 8003f7a:	4683      	mov	fp, r0
 8003f7c:	f7fc fbc0 	bl	8000700 <__aeabi_i2d>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	ec43 2b18 	vmov	d8, r2, r3
 8003f88:	a367      	add	r3, pc, #412	; (adr r3, 8004128 <__ieee754_rem_pio2+0x300>)
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	f7fc f93b 	bl	8000208 <__aeabi_dmul>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4620      	mov	r0, r4
 8003f98:	4629      	mov	r1, r5
 8003f9a:	f7fc fa63 	bl	8000464 <__aeabi_dsub>
 8003f9e:	a364      	add	r3, pc, #400	; (adr r3, 8004130 <__ieee754_rem_pio2+0x308>)
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	4606      	mov	r6, r0
 8003fa6:	460f      	mov	r7, r1
 8003fa8:	ec51 0b18 	vmov	r0, r1, d8
 8003fac:	f7fc f92c 	bl	8000208 <__aeabi_dmul>
 8003fb0:	f1bb 0f1f 	cmp.w	fp, #31
 8003fb4:	4604      	mov	r4, r0
 8003fb6:	460d      	mov	r5, r1
 8003fb8:	dc0d      	bgt.n	8003fd6 <__ieee754_rem_pio2+0x1ae>
 8003fba:	4b6e      	ldr	r3, [pc, #440]	; (8004174 <__ieee754_rem_pio2+0x34c>)
 8003fbc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8003fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fc4:	4543      	cmp	r3, r8
 8003fc6:	d006      	beq.n	8003fd6 <__ieee754_rem_pio2+0x1ae>
 8003fc8:	4622      	mov	r2, r4
 8003fca:	462b      	mov	r3, r5
 8003fcc:	4630      	mov	r0, r6
 8003fce:	4639      	mov	r1, r7
 8003fd0:	f7fc fa48 	bl	8000464 <__aeabi_dsub>
 8003fd4:	e00f      	b.n	8003ff6 <__ieee754_rem_pio2+0x1ce>
 8003fd6:	462b      	mov	r3, r5
 8003fd8:	4622      	mov	r2, r4
 8003fda:	4630      	mov	r0, r6
 8003fdc:	4639      	mov	r1, r7
 8003fde:	f7fc fa41 	bl	8000464 <__aeabi_dsub>
 8003fe2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003fe6:	9303      	str	r3, [sp, #12]
 8003fe8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003fec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8003ff0:	f1b8 0f10 	cmp.w	r8, #16
 8003ff4:	dc02      	bgt.n	8003ffc <__ieee754_rem_pio2+0x1d4>
 8003ff6:	e9ca 0100 	strd	r0, r1, [sl]
 8003ffa:	e039      	b.n	8004070 <__ieee754_rem_pio2+0x248>
 8003ffc:	a34e      	add	r3, pc, #312	; (adr r3, 8004138 <__ieee754_rem_pio2+0x310>)
 8003ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004002:	ec51 0b18 	vmov	r0, r1, d8
 8004006:	f7fc f8ff 	bl	8000208 <__aeabi_dmul>
 800400a:	4604      	mov	r4, r0
 800400c:	460d      	mov	r5, r1
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	4630      	mov	r0, r6
 8004014:	4639      	mov	r1, r7
 8004016:	f7fc fa25 	bl	8000464 <__aeabi_dsub>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4680      	mov	r8, r0
 8004020:	4689      	mov	r9, r1
 8004022:	4630      	mov	r0, r6
 8004024:	4639      	mov	r1, r7
 8004026:	f7fc fa1d 	bl	8000464 <__aeabi_dsub>
 800402a:	4622      	mov	r2, r4
 800402c:	462b      	mov	r3, r5
 800402e:	f7fc fa19 	bl	8000464 <__aeabi_dsub>
 8004032:	a343      	add	r3, pc, #268	; (adr r3, 8004140 <__ieee754_rem_pio2+0x318>)
 8004034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004038:	4604      	mov	r4, r0
 800403a:	460d      	mov	r5, r1
 800403c:	ec51 0b18 	vmov	r0, r1, d8
 8004040:	f7fc f8e2 	bl	8000208 <__aeabi_dmul>
 8004044:	4622      	mov	r2, r4
 8004046:	462b      	mov	r3, r5
 8004048:	f7fc fa0c 	bl	8000464 <__aeabi_dsub>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4604      	mov	r4, r0
 8004052:	460d      	mov	r5, r1
 8004054:	4640      	mov	r0, r8
 8004056:	4649      	mov	r1, r9
 8004058:	f7fc fa04 	bl	8000464 <__aeabi_dsub>
 800405c:	9a03      	ldr	r2, [sp, #12]
 800405e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b31      	cmp	r3, #49	; 0x31
 8004066:	dc24      	bgt.n	80040b2 <__ieee754_rem_pio2+0x28a>
 8004068:	e9ca 0100 	strd	r0, r1, [sl]
 800406c:	4646      	mov	r6, r8
 800406e:	464f      	mov	r7, r9
 8004070:	e9da 8900 	ldrd	r8, r9, [sl]
 8004074:	4630      	mov	r0, r6
 8004076:	4642      	mov	r2, r8
 8004078:	464b      	mov	r3, r9
 800407a:	4639      	mov	r1, r7
 800407c:	f7fc f9f2 	bl	8000464 <__aeabi_dsub>
 8004080:	462b      	mov	r3, r5
 8004082:	4622      	mov	r2, r4
 8004084:	f7fc f9ee 	bl	8000464 <__aeabi_dsub>
 8004088:	9b02      	ldr	r3, [sp, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004090:	f6bf af0a 	bge.w	8003ea8 <__ieee754_rem_pio2+0x80>
 8004094:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004098:	f8ca 3004 	str.w	r3, [sl, #4]
 800409c:	f8ca 8000 	str.w	r8, [sl]
 80040a0:	f8ca 0008 	str.w	r0, [sl, #8]
 80040a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80040a8:	f8ca 300c 	str.w	r3, [sl, #12]
 80040ac:	f1cb 0b00 	rsb	fp, fp, #0
 80040b0:	e6fa      	b.n	8003ea8 <__ieee754_rem_pio2+0x80>
 80040b2:	a327      	add	r3, pc, #156	; (adr r3, 8004150 <__ieee754_rem_pio2+0x328>)
 80040b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b8:	ec51 0b18 	vmov	r0, r1, d8
 80040bc:	f7fc f8a4 	bl	8000208 <__aeabi_dmul>
 80040c0:	4604      	mov	r4, r0
 80040c2:	460d      	mov	r5, r1
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4640      	mov	r0, r8
 80040ca:	4649      	mov	r1, r9
 80040cc:	f7fc f9ca 	bl	8000464 <__aeabi_dsub>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4606      	mov	r6, r0
 80040d6:	460f      	mov	r7, r1
 80040d8:	4640      	mov	r0, r8
 80040da:	4649      	mov	r1, r9
 80040dc:	f7fc f9c2 	bl	8000464 <__aeabi_dsub>
 80040e0:	4622      	mov	r2, r4
 80040e2:	462b      	mov	r3, r5
 80040e4:	f7fc f9be 	bl	8000464 <__aeabi_dsub>
 80040e8:	a31b      	add	r3, pc, #108	; (adr r3, 8004158 <__ieee754_rem_pio2+0x330>)
 80040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ee:	4604      	mov	r4, r0
 80040f0:	460d      	mov	r5, r1
 80040f2:	ec51 0b18 	vmov	r0, r1, d8
 80040f6:	f7fc f887 	bl	8000208 <__aeabi_dmul>
 80040fa:	4622      	mov	r2, r4
 80040fc:	462b      	mov	r3, r5
 80040fe:	f7fc f9b1 	bl	8000464 <__aeabi_dsub>
 8004102:	4604      	mov	r4, r0
 8004104:	460d      	mov	r5, r1
 8004106:	e75f      	b.n	8003fc8 <__ieee754_rem_pio2+0x1a0>
 8004108:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <__ieee754_rem_pio2+0x350>)
 800410a:	4598      	cmp	r8, r3
 800410c:	dd36      	ble.n	800417c <__ieee754_rem_pio2+0x354>
 800410e:	ee10 2a10 	vmov	r2, s0
 8004112:	462b      	mov	r3, r5
 8004114:	4620      	mov	r0, r4
 8004116:	4629      	mov	r1, r5
 8004118:	f7fc f9a4 	bl	8000464 <__aeabi_dsub>
 800411c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004120:	e9ca 0100 	strd	r0, r1, [sl]
 8004124:	e694      	b.n	8003e50 <__ieee754_rem_pio2+0x28>
 8004126:	bf00      	nop
 8004128:	54400000 	.word	0x54400000
 800412c:	3ff921fb 	.word	0x3ff921fb
 8004130:	1a626331 	.word	0x1a626331
 8004134:	3dd0b461 	.word	0x3dd0b461
 8004138:	1a600000 	.word	0x1a600000
 800413c:	3dd0b461 	.word	0x3dd0b461
 8004140:	2e037073 	.word	0x2e037073
 8004144:	3ba3198a 	.word	0x3ba3198a
 8004148:	6dc9c883 	.word	0x6dc9c883
 800414c:	3fe45f30 	.word	0x3fe45f30
 8004150:	2e000000 	.word	0x2e000000
 8004154:	3ba3198a 	.word	0x3ba3198a
 8004158:	252049c1 	.word	0x252049c1
 800415c:	397b839a 	.word	0x397b839a
 8004160:	3fe921fb 	.word	0x3fe921fb
 8004164:	4002d97b 	.word	0x4002d97b
 8004168:	3ff921fb 	.word	0x3ff921fb
 800416c:	413921fb 	.word	0x413921fb
 8004170:	3fe00000 	.word	0x3fe00000
 8004174:	08004e20 	.word	0x08004e20
 8004178:	7fefffff 	.word	0x7fefffff
 800417c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004180:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8004184:	ee10 0a10 	vmov	r0, s0
 8004188:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800418c:	ee10 6a10 	vmov	r6, s0
 8004190:	460f      	mov	r7, r1
 8004192:	f7fc fba7 	bl	80008e4 <__aeabi_d2iz>
 8004196:	f7fc fab3 	bl	8000700 <__aeabi_i2d>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4630      	mov	r0, r6
 80041a0:	4639      	mov	r1, r7
 80041a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80041a6:	f7fc f95d 	bl	8000464 <__aeabi_dsub>
 80041aa:	4b22      	ldr	r3, [pc, #136]	; (8004234 <__ieee754_rem_pio2+0x40c>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	f7fc f82b 	bl	8000208 <__aeabi_dmul>
 80041b2:	460f      	mov	r7, r1
 80041b4:	4606      	mov	r6, r0
 80041b6:	f7fc fb95 	bl	80008e4 <__aeabi_d2iz>
 80041ba:	f7fc faa1 	bl	8000700 <__aeabi_i2d>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	4630      	mov	r0, r6
 80041c4:	4639      	mov	r1, r7
 80041c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80041ca:	f7fc f94b 	bl	8000464 <__aeabi_dsub>
 80041ce:	4b19      	ldr	r3, [pc, #100]	; (8004234 <__ieee754_rem_pio2+0x40c>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	f7fc f819 	bl	8000208 <__aeabi_dmul>
 80041d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80041da:	ad04      	add	r5, sp, #16
 80041dc:	f04f 0803 	mov.w	r8, #3
 80041e0:	46a9      	mov	r9, r5
 80041e2:	2600      	movs	r6, #0
 80041e4:	2700      	movs	r7, #0
 80041e6:	4632      	mov	r2, r6
 80041e8:	463b      	mov	r3, r7
 80041ea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80041ee:	46c3      	mov	fp, r8
 80041f0:	3d08      	subs	r5, #8
 80041f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80041f6:	f7fc fb43 	bl	8000880 <__aeabi_dcmpeq>
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d1f3      	bne.n	80041e6 <__ieee754_rem_pio2+0x3be>
 80041fe:	4b0e      	ldr	r3, [pc, #56]	; (8004238 <__ieee754_rem_pio2+0x410>)
 8004200:	9301      	str	r3, [sp, #4]
 8004202:	2302      	movs	r3, #2
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	4622      	mov	r2, r4
 8004208:	465b      	mov	r3, fp
 800420a:	4651      	mov	r1, sl
 800420c:	4648      	mov	r0, r9
 800420e:	f000 f8df 	bl	80043d0 <__kernel_rem_pio2>
 8004212:	9b02      	ldr	r3, [sp, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	4683      	mov	fp, r0
 8004218:	f6bf ae46 	bge.w	8003ea8 <__ieee754_rem_pio2+0x80>
 800421c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004220:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004224:	f8ca 3004 	str.w	r3, [sl, #4]
 8004228:	f8da 300c 	ldr.w	r3, [sl, #12]
 800422c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004230:	e73a      	b.n	80040a8 <__ieee754_rem_pio2+0x280>
 8004232:	bf00      	nop
 8004234:	41700000 	.word	0x41700000
 8004238:	08004ea0 	.word	0x08004ea0
 800423c:	00000000 	.word	0x00000000

08004240 <__kernel_cos>:
 8004240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004244:	ec57 6b10 	vmov	r6, r7, d0
 8004248:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800424c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004250:	ed8d 1b00 	vstr	d1, [sp]
 8004254:	da07      	bge.n	8004266 <__kernel_cos+0x26>
 8004256:	ee10 0a10 	vmov	r0, s0
 800425a:	4639      	mov	r1, r7
 800425c:	f7fc fb42 	bl	80008e4 <__aeabi_d2iz>
 8004260:	2800      	cmp	r0, #0
 8004262:	f000 8088 	beq.w	8004376 <__kernel_cos+0x136>
 8004266:	4632      	mov	r2, r6
 8004268:	463b      	mov	r3, r7
 800426a:	4630      	mov	r0, r6
 800426c:	4639      	mov	r1, r7
 800426e:	f7fb ffcb 	bl	8000208 <__aeabi_dmul>
 8004272:	4b51      	ldr	r3, [pc, #324]	; (80043b8 <__kernel_cos+0x178>)
 8004274:	2200      	movs	r2, #0
 8004276:	4604      	mov	r4, r0
 8004278:	460d      	mov	r5, r1
 800427a:	f7fb ffc5 	bl	8000208 <__aeabi_dmul>
 800427e:	a340      	add	r3, pc, #256	; (adr r3, 8004380 <__kernel_cos+0x140>)
 8004280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004284:	4682      	mov	sl, r0
 8004286:	468b      	mov	fp, r1
 8004288:	4620      	mov	r0, r4
 800428a:	4629      	mov	r1, r5
 800428c:	f7fb ffbc 	bl	8000208 <__aeabi_dmul>
 8004290:	a33d      	add	r3, pc, #244	; (adr r3, 8004388 <__kernel_cos+0x148>)
 8004292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004296:	f7fc f8e7 	bl	8000468 <__adddf3>
 800429a:	4622      	mov	r2, r4
 800429c:	462b      	mov	r3, r5
 800429e:	f7fb ffb3 	bl	8000208 <__aeabi_dmul>
 80042a2:	a33b      	add	r3, pc, #236	; (adr r3, 8004390 <__kernel_cos+0x150>)
 80042a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a8:	f7fc f8dc 	bl	8000464 <__aeabi_dsub>
 80042ac:	4622      	mov	r2, r4
 80042ae:	462b      	mov	r3, r5
 80042b0:	f7fb ffaa 	bl	8000208 <__aeabi_dmul>
 80042b4:	a338      	add	r3, pc, #224	; (adr r3, 8004398 <__kernel_cos+0x158>)
 80042b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ba:	f7fc f8d5 	bl	8000468 <__adddf3>
 80042be:	4622      	mov	r2, r4
 80042c0:	462b      	mov	r3, r5
 80042c2:	f7fb ffa1 	bl	8000208 <__aeabi_dmul>
 80042c6:	a336      	add	r3, pc, #216	; (adr r3, 80043a0 <__kernel_cos+0x160>)
 80042c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042cc:	f7fc f8ca 	bl	8000464 <__aeabi_dsub>
 80042d0:	4622      	mov	r2, r4
 80042d2:	462b      	mov	r3, r5
 80042d4:	f7fb ff98 	bl	8000208 <__aeabi_dmul>
 80042d8:	a333      	add	r3, pc, #204	; (adr r3, 80043a8 <__kernel_cos+0x168>)
 80042da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042de:	f7fc f8c3 	bl	8000468 <__adddf3>
 80042e2:	4622      	mov	r2, r4
 80042e4:	462b      	mov	r3, r5
 80042e6:	f7fb ff8f 	bl	8000208 <__aeabi_dmul>
 80042ea:	4622      	mov	r2, r4
 80042ec:	462b      	mov	r3, r5
 80042ee:	f7fb ff8b 	bl	8000208 <__aeabi_dmul>
 80042f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042f6:	4604      	mov	r4, r0
 80042f8:	460d      	mov	r5, r1
 80042fa:	4630      	mov	r0, r6
 80042fc:	4639      	mov	r1, r7
 80042fe:	f7fb ff83 	bl	8000208 <__aeabi_dmul>
 8004302:	460b      	mov	r3, r1
 8004304:	4602      	mov	r2, r0
 8004306:	4629      	mov	r1, r5
 8004308:	4620      	mov	r0, r4
 800430a:	f7fc f8ab 	bl	8000464 <__aeabi_dsub>
 800430e:	4b2b      	ldr	r3, [pc, #172]	; (80043bc <__kernel_cos+0x17c>)
 8004310:	4598      	cmp	r8, r3
 8004312:	4606      	mov	r6, r0
 8004314:	460f      	mov	r7, r1
 8004316:	dc10      	bgt.n	800433a <__kernel_cos+0xfa>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4650      	mov	r0, sl
 800431e:	4659      	mov	r1, fp
 8004320:	f7fc f8a0 	bl	8000464 <__aeabi_dsub>
 8004324:	460b      	mov	r3, r1
 8004326:	4926      	ldr	r1, [pc, #152]	; (80043c0 <__kernel_cos+0x180>)
 8004328:	4602      	mov	r2, r0
 800432a:	2000      	movs	r0, #0
 800432c:	f7fc f89a 	bl	8000464 <__aeabi_dsub>
 8004330:	ec41 0b10 	vmov	d0, r0, r1
 8004334:	b003      	add	sp, #12
 8004336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800433a:	4b22      	ldr	r3, [pc, #136]	; (80043c4 <__kernel_cos+0x184>)
 800433c:	4920      	ldr	r1, [pc, #128]	; (80043c0 <__kernel_cos+0x180>)
 800433e:	4598      	cmp	r8, r3
 8004340:	bfcc      	ite	gt
 8004342:	4d21      	ldrgt	r5, [pc, #132]	; (80043c8 <__kernel_cos+0x188>)
 8004344:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004348:	2400      	movs	r4, #0
 800434a:	4622      	mov	r2, r4
 800434c:	462b      	mov	r3, r5
 800434e:	2000      	movs	r0, #0
 8004350:	f7fc f888 	bl	8000464 <__aeabi_dsub>
 8004354:	4622      	mov	r2, r4
 8004356:	4680      	mov	r8, r0
 8004358:	4689      	mov	r9, r1
 800435a:	462b      	mov	r3, r5
 800435c:	4650      	mov	r0, sl
 800435e:	4659      	mov	r1, fp
 8004360:	f7fc f880 	bl	8000464 <__aeabi_dsub>
 8004364:	4632      	mov	r2, r6
 8004366:	463b      	mov	r3, r7
 8004368:	f7fc f87c 	bl	8000464 <__aeabi_dsub>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4640      	mov	r0, r8
 8004372:	4649      	mov	r1, r9
 8004374:	e7da      	b.n	800432c <__kernel_cos+0xec>
 8004376:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80043b0 <__kernel_cos+0x170>
 800437a:	e7db      	b.n	8004334 <__kernel_cos+0xf4>
 800437c:	f3af 8000 	nop.w
 8004380:	be8838d4 	.word	0xbe8838d4
 8004384:	bda8fae9 	.word	0xbda8fae9
 8004388:	bdb4b1c4 	.word	0xbdb4b1c4
 800438c:	3e21ee9e 	.word	0x3e21ee9e
 8004390:	809c52ad 	.word	0x809c52ad
 8004394:	3e927e4f 	.word	0x3e927e4f
 8004398:	19cb1590 	.word	0x19cb1590
 800439c:	3efa01a0 	.word	0x3efa01a0
 80043a0:	16c15177 	.word	0x16c15177
 80043a4:	3f56c16c 	.word	0x3f56c16c
 80043a8:	5555554c 	.word	0x5555554c
 80043ac:	3fa55555 	.word	0x3fa55555
 80043b0:	00000000 	.word	0x00000000
 80043b4:	3ff00000 	.word	0x3ff00000
 80043b8:	3fe00000 	.word	0x3fe00000
 80043bc:	3fd33332 	.word	0x3fd33332
 80043c0:	3ff00000 	.word	0x3ff00000
 80043c4:	3fe90000 	.word	0x3fe90000
 80043c8:	3fd20000 	.word	0x3fd20000
 80043cc:	00000000 	.word	0x00000000

080043d0 <__kernel_rem_pio2>:
 80043d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d4:	ed2d 8b02 	vpush	{d8}
 80043d8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80043dc:	f112 0f14 	cmn.w	r2, #20
 80043e0:	9308      	str	r3, [sp, #32]
 80043e2:	9101      	str	r1, [sp, #4]
 80043e4:	4bc6      	ldr	r3, [pc, #792]	; (8004700 <__kernel_rem_pio2+0x330>)
 80043e6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80043e8:	9009      	str	r0, [sp, #36]	; 0x24
 80043ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80043ee:	9304      	str	r3, [sp, #16]
 80043f0:	9b08      	ldr	r3, [sp, #32]
 80043f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80043f6:	bfa8      	it	ge
 80043f8:	1ed4      	subge	r4, r2, #3
 80043fa:	9306      	str	r3, [sp, #24]
 80043fc:	bfb2      	itee	lt
 80043fe:	2400      	movlt	r4, #0
 8004400:	2318      	movge	r3, #24
 8004402:	fb94 f4f3 	sdivge	r4, r4, r3
 8004406:	f06f 0317 	mvn.w	r3, #23
 800440a:	fb04 3303 	mla	r3, r4, r3, r3
 800440e:	eb03 0a02 	add.w	sl, r3, r2
 8004412:	9b04      	ldr	r3, [sp, #16]
 8004414:	9a06      	ldr	r2, [sp, #24]
 8004416:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80046f0 <__kernel_rem_pio2+0x320>
 800441a:	eb03 0802 	add.w	r8, r3, r2
 800441e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004420:	1aa7      	subs	r7, r4, r2
 8004422:	ae20      	add	r6, sp, #128	; 0x80
 8004424:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004428:	2500      	movs	r5, #0
 800442a:	4545      	cmp	r5, r8
 800442c:	dd18      	ble.n	8004460 <__kernel_rem_pio2+0x90>
 800442e:	9b08      	ldr	r3, [sp, #32]
 8004430:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004434:	aa20      	add	r2, sp, #128	; 0x80
 8004436:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80046f0 <__kernel_rem_pio2+0x320>
 800443a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800443e:	f1c3 0301 	rsb	r3, r3, #1
 8004442:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8004446:	9307      	str	r3, [sp, #28]
 8004448:	9b07      	ldr	r3, [sp, #28]
 800444a:	9a04      	ldr	r2, [sp, #16]
 800444c:	4443      	add	r3, r8
 800444e:	429a      	cmp	r2, r3
 8004450:	db2f      	blt.n	80044b2 <__kernel_rem_pio2+0xe2>
 8004452:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004456:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800445a:	462f      	mov	r7, r5
 800445c:	2600      	movs	r6, #0
 800445e:	e01b      	b.n	8004498 <__kernel_rem_pio2+0xc8>
 8004460:	42ef      	cmn	r7, r5
 8004462:	d407      	bmi.n	8004474 <__kernel_rem_pio2+0xa4>
 8004464:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004468:	f7fc f94a 	bl	8000700 <__aeabi_i2d>
 800446c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004470:	3501      	adds	r5, #1
 8004472:	e7da      	b.n	800442a <__kernel_rem_pio2+0x5a>
 8004474:	ec51 0b18 	vmov	r0, r1, d8
 8004478:	e7f8      	b.n	800446c <__kernel_rem_pio2+0x9c>
 800447a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800447e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004482:	f7fb fec1 	bl	8000208 <__aeabi_dmul>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800448e:	f7fb ffeb 	bl	8000468 <__adddf3>
 8004492:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004496:	3601      	adds	r6, #1
 8004498:	9b06      	ldr	r3, [sp, #24]
 800449a:	429e      	cmp	r6, r3
 800449c:	f1a7 0708 	sub.w	r7, r7, #8
 80044a0:	ddeb      	ble.n	800447a <__kernel_rem_pio2+0xaa>
 80044a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80044a6:	3508      	adds	r5, #8
 80044a8:	ecab 7b02 	vstmia	fp!, {d7}
 80044ac:	f108 0801 	add.w	r8, r8, #1
 80044b0:	e7ca      	b.n	8004448 <__kernel_rem_pio2+0x78>
 80044b2:	9b04      	ldr	r3, [sp, #16]
 80044b4:	aa0c      	add	r2, sp, #48	; 0x30
 80044b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80044ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80044bc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80044be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80044c2:	9c04      	ldr	r4, [sp, #16]
 80044c4:	930a      	str	r3, [sp, #40]	; 0x28
 80044c6:	ab98      	add	r3, sp, #608	; 0x260
 80044c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80044cc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80044d0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80044d4:	f8cd b008 	str.w	fp, [sp, #8]
 80044d8:	4625      	mov	r5, r4
 80044da:	2d00      	cmp	r5, #0
 80044dc:	dc78      	bgt.n	80045d0 <__kernel_rem_pio2+0x200>
 80044de:	ec47 6b10 	vmov	d0, r6, r7
 80044e2:	4650      	mov	r0, sl
 80044e4:	f000 fbfc 	bl	8004ce0 <scalbn>
 80044e8:	ec57 6b10 	vmov	r6, r7, d0
 80044ec:	2200      	movs	r2, #0
 80044ee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80044f2:	ee10 0a10 	vmov	r0, s0
 80044f6:	4639      	mov	r1, r7
 80044f8:	f7fb fe86 	bl	8000208 <__aeabi_dmul>
 80044fc:	ec41 0b10 	vmov	d0, r0, r1
 8004500:	f000 fb6e 	bl	8004be0 <floor>
 8004504:	4b7f      	ldr	r3, [pc, #508]	; (8004704 <__kernel_rem_pio2+0x334>)
 8004506:	ec51 0b10 	vmov	r0, r1, d0
 800450a:	2200      	movs	r2, #0
 800450c:	f7fb fe7c 	bl	8000208 <__aeabi_dmul>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4630      	mov	r0, r6
 8004516:	4639      	mov	r1, r7
 8004518:	f7fb ffa4 	bl	8000464 <__aeabi_dsub>
 800451c:	460f      	mov	r7, r1
 800451e:	4606      	mov	r6, r0
 8004520:	f7fc f9e0 	bl	80008e4 <__aeabi_d2iz>
 8004524:	9007      	str	r0, [sp, #28]
 8004526:	f7fc f8eb 	bl	8000700 <__aeabi_i2d>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4630      	mov	r0, r6
 8004530:	4639      	mov	r1, r7
 8004532:	f7fb ff97 	bl	8000464 <__aeabi_dsub>
 8004536:	f1ba 0f00 	cmp.w	sl, #0
 800453a:	4606      	mov	r6, r0
 800453c:	460f      	mov	r7, r1
 800453e:	dd70      	ble.n	8004622 <__kernel_rem_pio2+0x252>
 8004540:	1e62      	subs	r2, r4, #1
 8004542:	ab0c      	add	r3, sp, #48	; 0x30
 8004544:	9d07      	ldr	r5, [sp, #28]
 8004546:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800454a:	f1ca 0118 	rsb	r1, sl, #24
 800454e:	fa40 f301 	asr.w	r3, r0, r1
 8004552:	441d      	add	r5, r3
 8004554:	408b      	lsls	r3, r1
 8004556:	1ac0      	subs	r0, r0, r3
 8004558:	ab0c      	add	r3, sp, #48	; 0x30
 800455a:	9507      	str	r5, [sp, #28]
 800455c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004560:	f1ca 0317 	rsb	r3, sl, #23
 8004564:	fa40 f303 	asr.w	r3, r0, r3
 8004568:	9302      	str	r3, [sp, #8]
 800456a:	9b02      	ldr	r3, [sp, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	dd66      	ble.n	800463e <__kernel_rem_pio2+0x26e>
 8004570:	9b07      	ldr	r3, [sp, #28]
 8004572:	2200      	movs	r2, #0
 8004574:	3301      	adds	r3, #1
 8004576:	9307      	str	r3, [sp, #28]
 8004578:	4615      	mov	r5, r2
 800457a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800457e:	4294      	cmp	r4, r2
 8004580:	f300 8099 	bgt.w	80046b6 <__kernel_rem_pio2+0x2e6>
 8004584:	f1ba 0f00 	cmp.w	sl, #0
 8004588:	dd07      	ble.n	800459a <__kernel_rem_pio2+0x1ca>
 800458a:	f1ba 0f01 	cmp.w	sl, #1
 800458e:	f000 80a5 	beq.w	80046dc <__kernel_rem_pio2+0x30c>
 8004592:	f1ba 0f02 	cmp.w	sl, #2
 8004596:	f000 80c1 	beq.w	800471c <__kernel_rem_pio2+0x34c>
 800459a:	9b02      	ldr	r3, [sp, #8]
 800459c:	2b02      	cmp	r3, #2
 800459e:	d14e      	bne.n	800463e <__kernel_rem_pio2+0x26e>
 80045a0:	4632      	mov	r2, r6
 80045a2:	463b      	mov	r3, r7
 80045a4:	4958      	ldr	r1, [pc, #352]	; (8004708 <__kernel_rem_pio2+0x338>)
 80045a6:	2000      	movs	r0, #0
 80045a8:	f7fb ff5c 	bl	8000464 <__aeabi_dsub>
 80045ac:	4606      	mov	r6, r0
 80045ae:	460f      	mov	r7, r1
 80045b0:	2d00      	cmp	r5, #0
 80045b2:	d044      	beq.n	800463e <__kernel_rem_pio2+0x26e>
 80045b4:	4650      	mov	r0, sl
 80045b6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80046f8 <__kernel_rem_pio2+0x328>
 80045ba:	f000 fb91 	bl	8004ce0 <scalbn>
 80045be:	4630      	mov	r0, r6
 80045c0:	4639      	mov	r1, r7
 80045c2:	ec53 2b10 	vmov	r2, r3, d0
 80045c6:	f7fb ff4d 	bl	8000464 <__aeabi_dsub>
 80045ca:	4606      	mov	r6, r0
 80045cc:	460f      	mov	r7, r1
 80045ce:	e036      	b.n	800463e <__kernel_rem_pio2+0x26e>
 80045d0:	4b4e      	ldr	r3, [pc, #312]	; (800470c <__kernel_rem_pio2+0x33c>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	4630      	mov	r0, r6
 80045d6:	4639      	mov	r1, r7
 80045d8:	f7fb fe16 	bl	8000208 <__aeabi_dmul>
 80045dc:	f7fc f982 	bl	80008e4 <__aeabi_d2iz>
 80045e0:	f7fc f88e 	bl	8000700 <__aeabi_i2d>
 80045e4:	4b4a      	ldr	r3, [pc, #296]	; (8004710 <__kernel_rem_pio2+0x340>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	4680      	mov	r8, r0
 80045ea:	4689      	mov	r9, r1
 80045ec:	f7fb fe0c 	bl	8000208 <__aeabi_dmul>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4630      	mov	r0, r6
 80045f6:	4639      	mov	r1, r7
 80045f8:	f7fb ff34 	bl	8000464 <__aeabi_dsub>
 80045fc:	f7fc f972 	bl	80008e4 <__aeabi_d2iz>
 8004600:	9b02      	ldr	r3, [sp, #8]
 8004602:	f843 0b04 	str.w	r0, [r3], #4
 8004606:	3d01      	subs	r5, #1
 8004608:	9302      	str	r3, [sp, #8]
 800460a:	ab70      	add	r3, sp, #448	; 0x1c0
 800460c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004614:	4640      	mov	r0, r8
 8004616:	4649      	mov	r1, r9
 8004618:	f7fb ff26 	bl	8000468 <__adddf3>
 800461c:	4606      	mov	r6, r0
 800461e:	460f      	mov	r7, r1
 8004620:	e75b      	b.n	80044da <__kernel_rem_pio2+0x10a>
 8004622:	d105      	bne.n	8004630 <__kernel_rem_pio2+0x260>
 8004624:	1e63      	subs	r3, r4, #1
 8004626:	aa0c      	add	r2, sp, #48	; 0x30
 8004628:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800462c:	15c3      	asrs	r3, r0, #23
 800462e:	e79b      	b.n	8004568 <__kernel_rem_pio2+0x198>
 8004630:	4b38      	ldr	r3, [pc, #224]	; (8004714 <__kernel_rem_pio2+0x344>)
 8004632:	2200      	movs	r2, #0
 8004634:	f7fc f942 	bl	80008bc <__aeabi_dcmpge>
 8004638:	2800      	cmp	r0, #0
 800463a:	d139      	bne.n	80046b0 <__kernel_rem_pio2+0x2e0>
 800463c:	9002      	str	r0, [sp, #8]
 800463e:	2200      	movs	r2, #0
 8004640:	2300      	movs	r3, #0
 8004642:	4630      	mov	r0, r6
 8004644:	4639      	mov	r1, r7
 8004646:	f7fc f91b 	bl	8000880 <__aeabi_dcmpeq>
 800464a:	2800      	cmp	r0, #0
 800464c:	f000 80b4 	beq.w	80047b8 <__kernel_rem_pio2+0x3e8>
 8004650:	f104 3bff 	add.w	fp, r4, #4294967295
 8004654:	465b      	mov	r3, fp
 8004656:	2200      	movs	r2, #0
 8004658:	9904      	ldr	r1, [sp, #16]
 800465a:	428b      	cmp	r3, r1
 800465c:	da65      	bge.n	800472a <__kernel_rem_pio2+0x35a>
 800465e:	2a00      	cmp	r2, #0
 8004660:	d07b      	beq.n	800475a <__kernel_rem_pio2+0x38a>
 8004662:	ab0c      	add	r3, sp, #48	; 0x30
 8004664:	f1aa 0a18 	sub.w	sl, sl, #24
 8004668:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 80a0 	beq.w	80047b2 <__kernel_rem_pio2+0x3e2>
 8004672:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80046f8 <__kernel_rem_pio2+0x328>
 8004676:	4650      	mov	r0, sl
 8004678:	f000 fb32 	bl	8004ce0 <scalbn>
 800467c:	4f23      	ldr	r7, [pc, #140]	; (800470c <__kernel_rem_pio2+0x33c>)
 800467e:	ec55 4b10 	vmov	r4, r5, d0
 8004682:	46d8      	mov	r8, fp
 8004684:	2600      	movs	r6, #0
 8004686:	f1b8 0f00 	cmp.w	r8, #0
 800468a:	f280 80cf 	bge.w	800482c <__kernel_rem_pio2+0x45c>
 800468e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80046f0 <__kernel_rem_pio2+0x320>
 8004692:	465f      	mov	r7, fp
 8004694:	f04f 0800 	mov.w	r8, #0
 8004698:	2f00      	cmp	r7, #0
 800469a:	f2c0 80fd 	blt.w	8004898 <__kernel_rem_pio2+0x4c8>
 800469e:	ab70      	add	r3, sp, #448	; 0x1c0
 80046a0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8004718 <__kernel_rem_pio2+0x348>
 80046a4:	ec55 4b18 	vmov	r4, r5, d8
 80046a8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80046ac:	2600      	movs	r6, #0
 80046ae:	e0e5      	b.n	800487c <__kernel_rem_pio2+0x4ac>
 80046b0:	2302      	movs	r3, #2
 80046b2:	9302      	str	r3, [sp, #8]
 80046b4:	e75c      	b.n	8004570 <__kernel_rem_pio2+0x1a0>
 80046b6:	f8db 3000 	ldr.w	r3, [fp]
 80046ba:	b955      	cbnz	r5, 80046d2 <__kernel_rem_pio2+0x302>
 80046bc:	b123      	cbz	r3, 80046c8 <__kernel_rem_pio2+0x2f8>
 80046be:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80046c2:	f8cb 3000 	str.w	r3, [fp]
 80046c6:	2301      	movs	r3, #1
 80046c8:	3201      	adds	r2, #1
 80046ca:	f10b 0b04 	add.w	fp, fp, #4
 80046ce:	461d      	mov	r5, r3
 80046d0:	e755      	b.n	800457e <__kernel_rem_pio2+0x1ae>
 80046d2:	1acb      	subs	r3, r1, r3
 80046d4:	f8cb 3000 	str.w	r3, [fp]
 80046d8:	462b      	mov	r3, r5
 80046da:	e7f5      	b.n	80046c8 <__kernel_rem_pio2+0x2f8>
 80046dc:	1e62      	subs	r2, r4, #1
 80046de:	ab0c      	add	r3, sp, #48	; 0x30
 80046e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046e4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80046e8:	a90c      	add	r1, sp, #48	; 0x30
 80046ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80046ee:	e754      	b.n	800459a <__kernel_rem_pio2+0x1ca>
	...
 80046fc:	3ff00000 	.word	0x3ff00000
 8004700:	08004fe8 	.word	0x08004fe8
 8004704:	40200000 	.word	0x40200000
 8004708:	3ff00000 	.word	0x3ff00000
 800470c:	3e700000 	.word	0x3e700000
 8004710:	41700000 	.word	0x41700000
 8004714:	3fe00000 	.word	0x3fe00000
 8004718:	08004fa8 	.word	0x08004fa8
 800471c:	1e62      	subs	r2, r4, #1
 800471e:	ab0c      	add	r3, sp, #48	; 0x30
 8004720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004724:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004728:	e7de      	b.n	80046e8 <__kernel_rem_pio2+0x318>
 800472a:	a90c      	add	r1, sp, #48	; 0x30
 800472c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004730:	3b01      	subs	r3, #1
 8004732:	430a      	orrs	r2, r1
 8004734:	e790      	b.n	8004658 <__kernel_rem_pio2+0x288>
 8004736:	3301      	adds	r3, #1
 8004738:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800473c:	2900      	cmp	r1, #0
 800473e:	d0fa      	beq.n	8004736 <__kernel_rem_pio2+0x366>
 8004740:	9a08      	ldr	r2, [sp, #32]
 8004742:	18e3      	adds	r3, r4, r3
 8004744:	18a6      	adds	r6, r4, r2
 8004746:	aa20      	add	r2, sp, #128	; 0x80
 8004748:	1c65      	adds	r5, r4, #1
 800474a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800474e:	9302      	str	r3, [sp, #8]
 8004750:	9b02      	ldr	r3, [sp, #8]
 8004752:	42ab      	cmp	r3, r5
 8004754:	da04      	bge.n	8004760 <__kernel_rem_pio2+0x390>
 8004756:	461c      	mov	r4, r3
 8004758:	e6b5      	b.n	80044c6 <__kernel_rem_pio2+0xf6>
 800475a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800475c:	2301      	movs	r3, #1
 800475e:	e7eb      	b.n	8004738 <__kernel_rem_pio2+0x368>
 8004760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004762:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004766:	f7fb ffcb 	bl	8000700 <__aeabi_i2d>
 800476a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800476e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004770:	46b3      	mov	fp, r6
 8004772:	461c      	mov	r4, r3
 8004774:	2700      	movs	r7, #0
 8004776:	f04f 0800 	mov.w	r8, #0
 800477a:	f04f 0900 	mov.w	r9, #0
 800477e:	9b06      	ldr	r3, [sp, #24]
 8004780:	429f      	cmp	r7, r3
 8004782:	dd06      	ble.n	8004792 <__kernel_rem_pio2+0x3c2>
 8004784:	ab70      	add	r3, sp, #448	; 0x1c0
 8004786:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800478a:	e9c3 8900 	strd	r8, r9, [r3]
 800478e:	3501      	adds	r5, #1
 8004790:	e7de      	b.n	8004750 <__kernel_rem_pio2+0x380>
 8004792:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004796:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800479a:	f7fb fd35 	bl	8000208 <__aeabi_dmul>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4640      	mov	r0, r8
 80047a4:	4649      	mov	r1, r9
 80047a6:	f7fb fe5f 	bl	8000468 <__adddf3>
 80047aa:	3701      	adds	r7, #1
 80047ac:	4680      	mov	r8, r0
 80047ae:	4689      	mov	r9, r1
 80047b0:	e7e5      	b.n	800477e <__kernel_rem_pio2+0x3ae>
 80047b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80047b6:	e754      	b.n	8004662 <__kernel_rem_pio2+0x292>
 80047b8:	ec47 6b10 	vmov	d0, r6, r7
 80047bc:	f1ca 0000 	rsb	r0, sl, #0
 80047c0:	f000 fa8e 	bl	8004ce0 <scalbn>
 80047c4:	ec57 6b10 	vmov	r6, r7, d0
 80047c8:	4b9f      	ldr	r3, [pc, #636]	; (8004a48 <__kernel_rem_pio2+0x678>)
 80047ca:	ee10 0a10 	vmov	r0, s0
 80047ce:	2200      	movs	r2, #0
 80047d0:	4639      	mov	r1, r7
 80047d2:	f7fc f873 	bl	80008bc <__aeabi_dcmpge>
 80047d6:	b300      	cbz	r0, 800481a <__kernel_rem_pio2+0x44a>
 80047d8:	4b9c      	ldr	r3, [pc, #624]	; (8004a4c <__kernel_rem_pio2+0x67c>)
 80047da:	2200      	movs	r2, #0
 80047dc:	4630      	mov	r0, r6
 80047de:	4639      	mov	r1, r7
 80047e0:	f7fb fd12 	bl	8000208 <__aeabi_dmul>
 80047e4:	f7fc f87e 	bl	80008e4 <__aeabi_d2iz>
 80047e8:	4605      	mov	r5, r0
 80047ea:	f7fb ff89 	bl	8000700 <__aeabi_i2d>
 80047ee:	4b96      	ldr	r3, [pc, #600]	; (8004a48 <__kernel_rem_pio2+0x678>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	f7fb fd09 	bl	8000208 <__aeabi_dmul>
 80047f6:	460b      	mov	r3, r1
 80047f8:	4602      	mov	r2, r0
 80047fa:	4639      	mov	r1, r7
 80047fc:	4630      	mov	r0, r6
 80047fe:	f7fb fe31 	bl	8000464 <__aeabi_dsub>
 8004802:	f7fc f86f 	bl	80008e4 <__aeabi_d2iz>
 8004806:	f104 0b01 	add.w	fp, r4, #1
 800480a:	ab0c      	add	r3, sp, #48	; 0x30
 800480c:	f10a 0a18 	add.w	sl, sl, #24
 8004810:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004814:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8004818:	e72b      	b.n	8004672 <__kernel_rem_pio2+0x2a2>
 800481a:	4630      	mov	r0, r6
 800481c:	4639      	mov	r1, r7
 800481e:	f7fc f861 	bl	80008e4 <__aeabi_d2iz>
 8004822:	ab0c      	add	r3, sp, #48	; 0x30
 8004824:	46a3      	mov	fp, r4
 8004826:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800482a:	e722      	b.n	8004672 <__kernel_rem_pio2+0x2a2>
 800482c:	ab70      	add	r3, sp, #448	; 0x1c0
 800482e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8004832:	ab0c      	add	r3, sp, #48	; 0x30
 8004834:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004838:	f7fb ff62 	bl	8000700 <__aeabi_i2d>
 800483c:	4622      	mov	r2, r4
 800483e:	462b      	mov	r3, r5
 8004840:	f7fb fce2 	bl	8000208 <__aeabi_dmul>
 8004844:	4632      	mov	r2, r6
 8004846:	e9c9 0100 	strd	r0, r1, [r9]
 800484a:	463b      	mov	r3, r7
 800484c:	4620      	mov	r0, r4
 800484e:	4629      	mov	r1, r5
 8004850:	f7fb fcda 	bl	8000208 <__aeabi_dmul>
 8004854:	f108 38ff 	add.w	r8, r8, #4294967295
 8004858:	4604      	mov	r4, r0
 800485a:	460d      	mov	r5, r1
 800485c:	e713      	b.n	8004686 <__kernel_rem_pio2+0x2b6>
 800485e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004862:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8004866:	f7fb fccf 	bl	8000208 <__aeabi_dmul>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4620      	mov	r0, r4
 8004870:	4629      	mov	r1, r5
 8004872:	f7fb fdf9 	bl	8000468 <__adddf3>
 8004876:	3601      	adds	r6, #1
 8004878:	4604      	mov	r4, r0
 800487a:	460d      	mov	r5, r1
 800487c:	9b04      	ldr	r3, [sp, #16]
 800487e:	429e      	cmp	r6, r3
 8004880:	dc01      	bgt.n	8004886 <__kernel_rem_pio2+0x4b6>
 8004882:	45b0      	cmp	r8, r6
 8004884:	daeb      	bge.n	800485e <__kernel_rem_pio2+0x48e>
 8004886:	ab48      	add	r3, sp, #288	; 0x120
 8004888:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800488c:	e9c3 4500 	strd	r4, r5, [r3]
 8004890:	3f01      	subs	r7, #1
 8004892:	f108 0801 	add.w	r8, r8, #1
 8004896:	e6ff      	b.n	8004698 <__kernel_rem_pio2+0x2c8>
 8004898:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800489a:	2b02      	cmp	r3, #2
 800489c:	dc0b      	bgt.n	80048b6 <__kernel_rem_pio2+0x4e6>
 800489e:	2b00      	cmp	r3, #0
 80048a0:	dc6e      	bgt.n	8004980 <__kernel_rem_pio2+0x5b0>
 80048a2:	d045      	beq.n	8004930 <__kernel_rem_pio2+0x560>
 80048a4:	9b07      	ldr	r3, [sp, #28]
 80048a6:	f003 0007 	and.w	r0, r3, #7
 80048aa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80048ae:	ecbd 8b02 	vpop	{d8}
 80048b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048b6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d1f3      	bne.n	80048a4 <__kernel_rem_pio2+0x4d4>
 80048bc:	ab48      	add	r3, sp, #288	; 0x120
 80048be:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80048c2:	46d0      	mov	r8, sl
 80048c4:	46d9      	mov	r9, fp
 80048c6:	f1b9 0f00 	cmp.w	r9, #0
 80048ca:	f1a8 0808 	sub.w	r8, r8, #8
 80048ce:	dc64      	bgt.n	800499a <__kernel_rem_pio2+0x5ca>
 80048d0:	465c      	mov	r4, fp
 80048d2:	2c01      	cmp	r4, #1
 80048d4:	f1aa 0a08 	sub.w	sl, sl, #8
 80048d8:	dc7e      	bgt.n	80049d8 <__kernel_rem_pio2+0x608>
 80048da:	2000      	movs	r0, #0
 80048dc:	2100      	movs	r1, #0
 80048de:	f1bb 0f01 	cmp.w	fp, #1
 80048e2:	f300 8097 	bgt.w	8004a14 <__kernel_rem_pio2+0x644>
 80048e6:	9b02      	ldr	r3, [sp, #8]
 80048e8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80048ec:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f040 8099 	bne.w	8004a28 <__kernel_rem_pio2+0x658>
 80048f6:	9b01      	ldr	r3, [sp, #4]
 80048f8:	e9c3 5600 	strd	r5, r6, [r3]
 80048fc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8004900:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004904:	e7ce      	b.n	80048a4 <__kernel_rem_pio2+0x4d4>
 8004906:	ab48      	add	r3, sp, #288	; 0x120
 8004908:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	f7fb fdaa 	bl	8000468 <__adddf3>
 8004914:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004918:	f1bb 0f00 	cmp.w	fp, #0
 800491c:	daf3      	bge.n	8004906 <__kernel_rem_pio2+0x536>
 800491e:	9b02      	ldr	r3, [sp, #8]
 8004920:	b113      	cbz	r3, 8004928 <__kernel_rem_pio2+0x558>
 8004922:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004926:	4619      	mov	r1, r3
 8004928:	9b01      	ldr	r3, [sp, #4]
 800492a:	e9c3 0100 	strd	r0, r1, [r3]
 800492e:	e7b9      	b.n	80048a4 <__kernel_rem_pio2+0x4d4>
 8004930:	2000      	movs	r0, #0
 8004932:	2100      	movs	r1, #0
 8004934:	e7f0      	b.n	8004918 <__kernel_rem_pio2+0x548>
 8004936:	ab48      	add	r3, sp, #288	; 0x120
 8004938:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	f7fb fd92 	bl	8000468 <__adddf3>
 8004944:	3c01      	subs	r4, #1
 8004946:	2c00      	cmp	r4, #0
 8004948:	daf5      	bge.n	8004936 <__kernel_rem_pio2+0x566>
 800494a:	9b02      	ldr	r3, [sp, #8]
 800494c:	b1e3      	cbz	r3, 8004988 <__kernel_rem_pio2+0x5b8>
 800494e:	4602      	mov	r2, r0
 8004950:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004954:	9c01      	ldr	r4, [sp, #4]
 8004956:	e9c4 2300 	strd	r2, r3, [r4]
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004962:	f7fb fd7f 	bl	8000464 <__aeabi_dsub>
 8004966:	ad4a      	add	r5, sp, #296	; 0x128
 8004968:	2401      	movs	r4, #1
 800496a:	45a3      	cmp	fp, r4
 800496c:	da0f      	bge.n	800498e <__kernel_rem_pio2+0x5be>
 800496e:	9b02      	ldr	r3, [sp, #8]
 8004970:	b113      	cbz	r3, 8004978 <__kernel_rem_pio2+0x5a8>
 8004972:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004976:	4619      	mov	r1, r3
 8004978:	9b01      	ldr	r3, [sp, #4]
 800497a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800497e:	e791      	b.n	80048a4 <__kernel_rem_pio2+0x4d4>
 8004980:	465c      	mov	r4, fp
 8004982:	2000      	movs	r0, #0
 8004984:	2100      	movs	r1, #0
 8004986:	e7de      	b.n	8004946 <__kernel_rem_pio2+0x576>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	e7e2      	b.n	8004954 <__kernel_rem_pio2+0x584>
 800498e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8004992:	f7fb fd69 	bl	8000468 <__adddf3>
 8004996:	3401      	adds	r4, #1
 8004998:	e7e7      	b.n	800496a <__kernel_rem_pio2+0x59a>
 800499a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800499e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80049a2:	4620      	mov	r0, r4
 80049a4:	4632      	mov	r2, r6
 80049a6:	463b      	mov	r3, r7
 80049a8:	4629      	mov	r1, r5
 80049aa:	f7fb fd5d 	bl	8000468 <__adddf3>
 80049ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	4620      	mov	r0, r4
 80049b8:	4629      	mov	r1, r5
 80049ba:	f7fb fd53 	bl	8000464 <__aeabi_dsub>
 80049be:	4632      	mov	r2, r6
 80049c0:	463b      	mov	r3, r7
 80049c2:	f7fb fd51 	bl	8000468 <__adddf3>
 80049c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80049ca:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80049ce:	ed88 7b00 	vstr	d7, [r8]
 80049d2:	f109 39ff 	add.w	r9, r9, #4294967295
 80049d6:	e776      	b.n	80048c6 <__kernel_rem_pio2+0x4f6>
 80049d8:	e9da 8900 	ldrd	r8, r9, [sl]
 80049dc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80049e0:	4640      	mov	r0, r8
 80049e2:	4632      	mov	r2, r6
 80049e4:	463b      	mov	r3, r7
 80049e6:	4649      	mov	r1, r9
 80049e8:	f7fb fd3e 	bl	8000468 <__adddf3>
 80049ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4640      	mov	r0, r8
 80049f6:	4649      	mov	r1, r9
 80049f8:	f7fb fd34 	bl	8000464 <__aeabi_dsub>
 80049fc:	4632      	mov	r2, r6
 80049fe:	463b      	mov	r3, r7
 8004a00:	f7fb fd32 	bl	8000468 <__adddf3>
 8004a04:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004a08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004a0c:	ed8a 7b00 	vstr	d7, [sl]
 8004a10:	3c01      	subs	r4, #1
 8004a12:	e75e      	b.n	80048d2 <__kernel_rem_pio2+0x502>
 8004a14:	ab48      	add	r3, sp, #288	; 0x120
 8004a16:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1e:	f7fb fd23 	bl	8000468 <__adddf3>
 8004a22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004a26:	e75a      	b.n	80048de <__kernel_rem_pio2+0x50e>
 8004a28:	9b01      	ldr	r3, [sp, #4]
 8004a2a:	9a01      	ldr	r2, [sp, #4]
 8004a2c:	601d      	str	r5, [r3, #0]
 8004a2e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8004a32:	605c      	str	r4, [r3, #4]
 8004a34:	609f      	str	r7, [r3, #8]
 8004a36:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8004a3a:	60d3      	str	r3, [r2, #12]
 8004a3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a40:	6110      	str	r0, [r2, #16]
 8004a42:	6153      	str	r3, [r2, #20]
 8004a44:	e72e      	b.n	80048a4 <__kernel_rem_pio2+0x4d4>
 8004a46:	bf00      	nop
 8004a48:	41700000 	.word	0x41700000
 8004a4c:	3e700000 	.word	0x3e700000

08004a50 <__kernel_sin>:
 8004a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a54:	ed2d 8b04 	vpush	{d8-d9}
 8004a58:	eeb0 8a41 	vmov.f32	s16, s2
 8004a5c:	eef0 8a61 	vmov.f32	s17, s3
 8004a60:	ec55 4b10 	vmov	r4, r5, d0
 8004a64:	b083      	sub	sp, #12
 8004a66:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004a6a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004a6e:	9001      	str	r0, [sp, #4]
 8004a70:	da06      	bge.n	8004a80 <__kernel_sin+0x30>
 8004a72:	ee10 0a10 	vmov	r0, s0
 8004a76:	4629      	mov	r1, r5
 8004a78:	f7fb ff34 	bl	80008e4 <__aeabi_d2iz>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	d051      	beq.n	8004b24 <__kernel_sin+0xd4>
 8004a80:	4622      	mov	r2, r4
 8004a82:	462b      	mov	r3, r5
 8004a84:	4620      	mov	r0, r4
 8004a86:	4629      	mov	r1, r5
 8004a88:	f7fb fbbe 	bl	8000208 <__aeabi_dmul>
 8004a8c:	4682      	mov	sl, r0
 8004a8e:	468b      	mov	fp, r1
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4620      	mov	r0, r4
 8004a96:	4629      	mov	r1, r5
 8004a98:	f7fb fbb6 	bl	8000208 <__aeabi_dmul>
 8004a9c:	a341      	add	r3, pc, #260	; (adr r3, 8004ba4 <__kernel_sin+0x154>)
 8004a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa2:	4680      	mov	r8, r0
 8004aa4:	4689      	mov	r9, r1
 8004aa6:	4650      	mov	r0, sl
 8004aa8:	4659      	mov	r1, fp
 8004aaa:	f7fb fbad 	bl	8000208 <__aeabi_dmul>
 8004aae:	a33f      	add	r3, pc, #252	; (adr r3, 8004bac <__kernel_sin+0x15c>)
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	f7fb fcd6 	bl	8000464 <__aeabi_dsub>
 8004ab8:	4652      	mov	r2, sl
 8004aba:	465b      	mov	r3, fp
 8004abc:	f7fb fba4 	bl	8000208 <__aeabi_dmul>
 8004ac0:	a33c      	add	r3, pc, #240	; (adr r3, 8004bb4 <__kernel_sin+0x164>)
 8004ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac6:	f7fb fccf 	bl	8000468 <__adddf3>
 8004aca:	4652      	mov	r2, sl
 8004acc:	465b      	mov	r3, fp
 8004ace:	f7fb fb9b 	bl	8000208 <__aeabi_dmul>
 8004ad2:	a33a      	add	r3, pc, #232	; (adr r3, 8004bbc <__kernel_sin+0x16c>)
 8004ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad8:	f7fb fcc4 	bl	8000464 <__aeabi_dsub>
 8004adc:	4652      	mov	r2, sl
 8004ade:	465b      	mov	r3, fp
 8004ae0:	f7fb fb92 	bl	8000208 <__aeabi_dmul>
 8004ae4:	a337      	add	r3, pc, #220	; (adr r3, 8004bc4 <__kernel_sin+0x174>)
 8004ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aea:	f7fb fcbd 	bl	8000468 <__adddf3>
 8004aee:	9b01      	ldr	r3, [sp, #4]
 8004af0:	4606      	mov	r6, r0
 8004af2:	460f      	mov	r7, r1
 8004af4:	b9eb      	cbnz	r3, 8004b32 <__kernel_sin+0xe2>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4650      	mov	r0, sl
 8004afc:	4659      	mov	r1, fp
 8004afe:	f7fb fb83 	bl	8000208 <__aeabi_dmul>
 8004b02:	a325      	add	r3, pc, #148	; (adr r3, 8004b98 <__kernel_sin+0x148>)
 8004b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b08:	f7fb fcac 	bl	8000464 <__aeabi_dsub>
 8004b0c:	4642      	mov	r2, r8
 8004b0e:	464b      	mov	r3, r9
 8004b10:	f7fb fb7a 	bl	8000208 <__aeabi_dmul>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4620      	mov	r0, r4
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	f7fb fca4 	bl	8000468 <__adddf3>
 8004b20:	4604      	mov	r4, r0
 8004b22:	460d      	mov	r5, r1
 8004b24:	ec45 4b10 	vmov	d0, r4, r5
 8004b28:	b003      	add	sp, #12
 8004b2a:	ecbd 8b04 	vpop	{d8-d9}
 8004b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b32:	4b1b      	ldr	r3, [pc, #108]	; (8004ba0 <__kernel_sin+0x150>)
 8004b34:	ec51 0b18 	vmov	r0, r1, d8
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f7fb fb65 	bl	8000208 <__aeabi_dmul>
 8004b3e:	4632      	mov	r2, r6
 8004b40:	ec41 0b19 	vmov	d9, r0, r1
 8004b44:	463b      	mov	r3, r7
 8004b46:	4640      	mov	r0, r8
 8004b48:	4649      	mov	r1, r9
 8004b4a:	f7fb fb5d 	bl	8000208 <__aeabi_dmul>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	ec51 0b19 	vmov	r0, r1, d9
 8004b56:	f7fb fc85 	bl	8000464 <__aeabi_dsub>
 8004b5a:	4652      	mov	r2, sl
 8004b5c:	465b      	mov	r3, fp
 8004b5e:	f7fb fb53 	bl	8000208 <__aeabi_dmul>
 8004b62:	ec53 2b18 	vmov	r2, r3, d8
 8004b66:	f7fb fc7d 	bl	8000464 <__aeabi_dsub>
 8004b6a:	a30b      	add	r3, pc, #44	; (adr r3, 8004b98 <__kernel_sin+0x148>)
 8004b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b70:	4606      	mov	r6, r0
 8004b72:	460f      	mov	r7, r1
 8004b74:	4640      	mov	r0, r8
 8004b76:	4649      	mov	r1, r9
 8004b78:	f7fb fb46 	bl	8000208 <__aeabi_dmul>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4630      	mov	r0, r6
 8004b82:	4639      	mov	r1, r7
 8004b84:	f7fb fc70 	bl	8000468 <__adddf3>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	4629      	mov	r1, r5
 8004b90:	f7fb fc68 	bl	8000464 <__aeabi_dsub>
 8004b94:	e7c4      	b.n	8004b20 <__kernel_sin+0xd0>
 8004b96:	bf00      	nop
 8004b98:	55555549 	.word	0x55555549
 8004b9c:	3fc55555 	.word	0x3fc55555
 8004ba0:	3fe00000 	.word	0x3fe00000
 8004ba4:	5acfd57c 	.word	0x5acfd57c
 8004ba8:	3de5d93a 	.word	0x3de5d93a
 8004bac:	8a2b9ceb 	.word	0x8a2b9ceb
 8004bb0:	3e5ae5e6 	.word	0x3e5ae5e6
 8004bb4:	57b1fe7d 	.word	0x57b1fe7d
 8004bb8:	3ec71de3 	.word	0x3ec71de3
 8004bbc:	19c161d5 	.word	0x19c161d5
 8004bc0:	3f2a01a0 	.word	0x3f2a01a0
 8004bc4:	1110f8a6 	.word	0x1110f8a6
 8004bc8:	3f811111 	.word	0x3f811111

08004bcc <fabs>:
 8004bcc:	ec51 0b10 	vmov	r0, r1, d0
 8004bd0:	ee10 2a10 	vmov	r2, s0
 8004bd4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004bd8:	ec43 2b10 	vmov	d0, r2, r3
 8004bdc:	4770      	bx	lr
	...

08004be0 <floor>:
 8004be0:	ec51 0b10 	vmov	r0, r1, d0
 8004be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004be8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004bec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004bf0:	2e13      	cmp	r6, #19
 8004bf2:	ee10 5a10 	vmov	r5, s0
 8004bf6:	ee10 8a10 	vmov	r8, s0
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	dc32      	bgt.n	8004c64 <floor+0x84>
 8004bfe:	2e00      	cmp	r6, #0
 8004c00:	da14      	bge.n	8004c2c <floor+0x4c>
 8004c02:	a333      	add	r3, pc, #204	; (adr r3, 8004cd0 <floor+0xf0>)
 8004c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c08:	f7fb fc2e 	bl	8000468 <__adddf3>
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f7fb fe5e 	bl	80008d0 <__aeabi_dcmpgt>
 8004c14:	b138      	cbz	r0, 8004c26 <floor+0x46>
 8004c16:	2c00      	cmp	r4, #0
 8004c18:	da57      	bge.n	8004cca <floor+0xea>
 8004c1a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004c1e:	431d      	orrs	r5, r3
 8004c20:	d001      	beq.n	8004c26 <floor+0x46>
 8004c22:	4c2d      	ldr	r4, [pc, #180]	; (8004cd8 <floor+0xf8>)
 8004c24:	2500      	movs	r5, #0
 8004c26:	4621      	mov	r1, r4
 8004c28:	4628      	mov	r0, r5
 8004c2a:	e025      	b.n	8004c78 <floor+0x98>
 8004c2c:	4f2b      	ldr	r7, [pc, #172]	; (8004cdc <floor+0xfc>)
 8004c2e:	4137      	asrs	r7, r6
 8004c30:	ea01 0307 	and.w	r3, r1, r7
 8004c34:	4303      	orrs	r3, r0
 8004c36:	d01f      	beq.n	8004c78 <floor+0x98>
 8004c38:	a325      	add	r3, pc, #148	; (adr r3, 8004cd0 <floor+0xf0>)
 8004c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3e:	f7fb fc13 	bl	8000468 <__adddf3>
 8004c42:	2200      	movs	r2, #0
 8004c44:	2300      	movs	r3, #0
 8004c46:	f7fb fe43 	bl	80008d0 <__aeabi_dcmpgt>
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	d0eb      	beq.n	8004c26 <floor+0x46>
 8004c4e:	2c00      	cmp	r4, #0
 8004c50:	bfbe      	ittt	lt
 8004c52:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004c56:	fa43 f606 	asrlt.w	r6, r3, r6
 8004c5a:	19a4      	addlt	r4, r4, r6
 8004c5c:	ea24 0407 	bic.w	r4, r4, r7
 8004c60:	2500      	movs	r5, #0
 8004c62:	e7e0      	b.n	8004c26 <floor+0x46>
 8004c64:	2e33      	cmp	r6, #51	; 0x33
 8004c66:	dd0b      	ble.n	8004c80 <floor+0xa0>
 8004c68:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004c6c:	d104      	bne.n	8004c78 <floor+0x98>
 8004c6e:	ee10 2a10 	vmov	r2, s0
 8004c72:	460b      	mov	r3, r1
 8004c74:	f7fb fbf8 	bl	8000468 <__adddf3>
 8004c78:	ec41 0b10 	vmov	d0, r0, r1
 8004c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c80:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004c84:	f04f 33ff 	mov.w	r3, #4294967295
 8004c88:	fa23 f707 	lsr.w	r7, r3, r7
 8004c8c:	4207      	tst	r7, r0
 8004c8e:	d0f3      	beq.n	8004c78 <floor+0x98>
 8004c90:	a30f      	add	r3, pc, #60	; (adr r3, 8004cd0 <floor+0xf0>)
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	f7fb fbe7 	bl	8000468 <__adddf3>
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f7fb fe17 	bl	80008d0 <__aeabi_dcmpgt>
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	d0bf      	beq.n	8004c26 <floor+0x46>
 8004ca6:	2c00      	cmp	r4, #0
 8004ca8:	da02      	bge.n	8004cb0 <floor+0xd0>
 8004caa:	2e14      	cmp	r6, #20
 8004cac:	d103      	bne.n	8004cb6 <floor+0xd6>
 8004cae:	3401      	adds	r4, #1
 8004cb0:	ea25 0507 	bic.w	r5, r5, r7
 8004cb4:	e7b7      	b.n	8004c26 <floor+0x46>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004cbc:	fa03 f606 	lsl.w	r6, r3, r6
 8004cc0:	4435      	add	r5, r6
 8004cc2:	4545      	cmp	r5, r8
 8004cc4:	bf38      	it	cc
 8004cc6:	18e4      	addcc	r4, r4, r3
 8004cc8:	e7f2      	b.n	8004cb0 <floor+0xd0>
 8004cca:	2500      	movs	r5, #0
 8004ccc:	462c      	mov	r4, r5
 8004cce:	e7aa      	b.n	8004c26 <floor+0x46>
 8004cd0:	8800759c 	.word	0x8800759c
 8004cd4:	7e37e43c 	.word	0x7e37e43c
 8004cd8:	bff00000 	.word	0xbff00000
 8004cdc:	000fffff 	.word	0x000fffff

08004ce0 <scalbn>:
 8004ce0:	b570      	push	{r4, r5, r6, lr}
 8004ce2:	ec55 4b10 	vmov	r4, r5, d0
 8004ce6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004cea:	4606      	mov	r6, r0
 8004cec:	462b      	mov	r3, r5
 8004cee:	b99a      	cbnz	r2, 8004d18 <scalbn+0x38>
 8004cf0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004cf4:	4323      	orrs	r3, r4
 8004cf6:	d036      	beq.n	8004d66 <scalbn+0x86>
 8004cf8:	4b39      	ldr	r3, [pc, #228]	; (8004de0 <scalbn+0x100>)
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	ee10 0a10 	vmov	r0, s0
 8004d00:	2200      	movs	r2, #0
 8004d02:	f7fb fa81 	bl	8000208 <__aeabi_dmul>
 8004d06:	4b37      	ldr	r3, [pc, #220]	; (8004de4 <scalbn+0x104>)
 8004d08:	429e      	cmp	r6, r3
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	460d      	mov	r5, r1
 8004d0e:	da10      	bge.n	8004d32 <scalbn+0x52>
 8004d10:	a32b      	add	r3, pc, #172	; (adr r3, 8004dc0 <scalbn+0xe0>)
 8004d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d16:	e03a      	b.n	8004d8e <scalbn+0xae>
 8004d18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004d1c:	428a      	cmp	r2, r1
 8004d1e:	d10c      	bne.n	8004d3a <scalbn+0x5a>
 8004d20:	ee10 2a10 	vmov	r2, s0
 8004d24:	4620      	mov	r0, r4
 8004d26:	4629      	mov	r1, r5
 8004d28:	f7fb fb9e 	bl	8000468 <__adddf3>
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	460d      	mov	r5, r1
 8004d30:	e019      	b.n	8004d66 <scalbn+0x86>
 8004d32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004d36:	460b      	mov	r3, r1
 8004d38:	3a36      	subs	r2, #54	; 0x36
 8004d3a:	4432      	add	r2, r6
 8004d3c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004d40:	428a      	cmp	r2, r1
 8004d42:	dd08      	ble.n	8004d56 <scalbn+0x76>
 8004d44:	2d00      	cmp	r5, #0
 8004d46:	a120      	add	r1, pc, #128	; (adr r1, 8004dc8 <scalbn+0xe8>)
 8004d48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d4c:	da1c      	bge.n	8004d88 <scalbn+0xa8>
 8004d4e:	a120      	add	r1, pc, #128	; (adr r1, 8004dd0 <scalbn+0xf0>)
 8004d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d54:	e018      	b.n	8004d88 <scalbn+0xa8>
 8004d56:	2a00      	cmp	r2, #0
 8004d58:	dd08      	ble.n	8004d6c <scalbn+0x8c>
 8004d5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004d5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004d66:	ec45 4b10 	vmov	d0, r4, r5
 8004d6a:	bd70      	pop	{r4, r5, r6, pc}
 8004d6c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004d70:	da19      	bge.n	8004da6 <scalbn+0xc6>
 8004d72:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004d76:	429e      	cmp	r6, r3
 8004d78:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8004d7c:	dd0a      	ble.n	8004d94 <scalbn+0xb4>
 8004d7e:	a112      	add	r1, pc, #72	; (adr r1, 8004dc8 <scalbn+0xe8>)
 8004d80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e2      	bne.n	8004d4e <scalbn+0x6e>
 8004d88:	a30f      	add	r3, pc, #60	; (adr r3, 8004dc8 <scalbn+0xe8>)
 8004d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8e:	f7fb fa3b 	bl	8000208 <__aeabi_dmul>
 8004d92:	e7cb      	b.n	8004d2c <scalbn+0x4c>
 8004d94:	a10a      	add	r1, pc, #40	; (adr r1, 8004dc0 <scalbn+0xe0>)
 8004d96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0b8      	beq.n	8004d10 <scalbn+0x30>
 8004d9e:	a10e      	add	r1, pc, #56	; (adr r1, 8004dd8 <scalbn+0xf8>)
 8004da0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004da4:	e7b4      	b.n	8004d10 <scalbn+0x30>
 8004da6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004daa:	3236      	adds	r2, #54	; 0x36
 8004dac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004db0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004db4:	4620      	mov	r0, r4
 8004db6:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <scalbn+0x108>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	e7e8      	b.n	8004d8e <scalbn+0xae>
 8004dbc:	f3af 8000 	nop.w
 8004dc0:	c2f8f359 	.word	0xc2f8f359
 8004dc4:	01a56e1f 	.word	0x01a56e1f
 8004dc8:	8800759c 	.word	0x8800759c
 8004dcc:	7e37e43c 	.word	0x7e37e43c
 8004dd0:	8800759c 	.word	0x8800759c
 8004dd4:	fe37e43c 	.word	0xfe37e43c
 8004dd8:	c2f8f359 	.word	0xc2f8f359
 8004ddc:	81a56e1f 	.word	0x81a56e1f
 8004de0:	43500000 	.word	0x43500000
 8004de4:	ffff3cb0 	.word	0xffff3cb0
 8004de8:	3c900000 	.word	0x3c900000

08004dec <_init>:
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	bf00      	nop
 8004df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df2:	bc08      	pop	{r3}
 8004df4:	469e      	mov	lr, r3
 8004df6:	4770      	bx	lr

08004df8 <_fini>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	bf00      	nop
 8004dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfe:	bc08      	pop	{r3}
 8004e00:	469e      	mov	lr, r3
 8004e02:	4770      	bx	lr
